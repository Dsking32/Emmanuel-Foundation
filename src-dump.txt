==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\App.jsx ====
import React from "react";

function App() {
  return (
    <div className="min-h-screen flex flex-col">
      {/* Navbar */}
      <nav className="bg-blue-700 text-white px-6 py-4 flex justify-between items-center shadow">
        <h1 className="text-xl font-bold">MySchool</h1>
        <div className="space-x-6">
          <a href="#" className="hover:text-gray-200">Home</a>
          <a href="#" className="hover:text-gray-200">About</a>
          <a href="#" className="hover:text-gray-200">Admissions</a>
          <a href="#" className="hover:text-gray-200">Contact</a>
        </div>
      </nav>

      {/* Hero Section */}
      <header className="flex-1 bg-gradient-to-r from-blue-600 to-indigo-700 text-white flex flex-col justify-center items-center text-center p-10">
        <h2 className="text-4xl font-bold text-green-600">Tailwind is working!</h2>
        <p className="max-w-2xl text-lg mb-6">
          Your future starts here. Apply now, check your admission status, and
          view your results online â€” all in one place.
        </p>
        <button className="bg-white text-blue-700 px-6 py-3 rounded font-semibold shadow hover:bg-gray-100 transition">
          Apply Now
        </button>
      </header>

      {/* About Section */}
      <section className="py-16 px-6 bg-gray-50 text-center">
        <h3 className="text-3xl font-bold mb-4">About Our School</h3>
        <p className="max-w-3xl mx-auto text-gray-600">
          We are dedicated to academic excellence and holistic education.
          Students can easily apply for admission, check admission lists, and
          view their results online through our platform.
        </p>
      </section>

      {/* Footer */}
      <footer className="bg-blue-800 text-white text-center py-6 mt-auto">
        <p>&copy; {new Date().getFullYear()} MySchool. All rights reserved.</p>
      </footer>
    </div>
  );
}

export default App;



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\index.css ====
@import "tailwindcss";

/* =========================
   Emmanuel Foundation Tokens
   ========================= */
:root {
  --brand: 226 64% 33%;    /* #1E3A8A Royal Blue */
  --brand-600: 226 64% 33%;
  --brand-700: 226 64% 28%;
  --accent: 42 95% 52%;    /* Gold */
  --muted: 215 16% 47%;
  --bg: 210 20% 98%;
  --card: 0 0% 100%;
}

html, body {
  background: hsl(var(--bg));
  color: hsl(222 47% 11%);
}

/* Optional: If you add a Google Font in index.html, map it here:
   <link rel="preconnect" href="https://fonts.googleapis.com">
   <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500;700;800&display=swap" rel="stylesheet">
*/
@layer utilities {
  .font-display { font-family: Poppins, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; }
  .prose-max { max-width: 65ch; }
  .img-cover { width: 100%; height: 100%; object-fit: cover; object-position: center; }
  .no-scrollbar { scrollbar-width: none; }
  .no-scrollbar::-webkit-scrollbar { display: none; }
  .scroll-section { scroll-margin-top: 5rem; }
}

/* =========================
   Design primitives
   ========================= */
@layer components {
  .btn {
    @apply inline-flex items-center justify-center rounded-xl px-4 py-2 font-semibold
           focus:outline-none focus:ring-2 focus:ring-offset-2 transition shadow-md;
  }
  .btn-primary {
    background: hsl(var(--brand));
    color: white;
    @apply hover:brightness-110 focus:ring-[hsl(var(--brand))];
  }
  .btn-ghost {
    @apply bg-white/10 text-white hover:bg-white/20;
  }
  .btn-accent {
    background: hsl(var(--accent));
    color: black;
    @apply hover:brightness-105 focus:ring-[hsl(var(--accent))];
  }

  .card {
    @apply bg-white rounded-xl shadow-md border border-black/5;
  }

  .badge {
    @apply inline-flex items-center rounded-full px-3 py-1 text-xs font-semibold;
  }
  .badge-accent {
    background: hsl(var(--accent) / 0.15);
    color: hsl(var(--brand));
  }

  .container-wide {
    @apply max-w-6xl mx-auto px-4 md:px-6;
  }

  .kicker {
    @apply inline-block tracking-wide text-[11px] uppercase bg-white/10 border border-white/20 text-white px-2 py-1 rounded-full;
  }
}

/* Reveal-on-scroll (no library) */
.reveal { opacity: 0; transform: translateY(16px); transition: opacity .5s ease, transform .6s cubic-bezier(.22,1,.36,1); }
.revealed { opacity: 1; transform: translateY(0); }
.reveal.delay-1 { transition-delay: .08s; }
.reveal.delay-2 { transition-delay: .16s; }
.reveal.delay-3 { transition-delay: .24s; }

/* Safe area for floating buttons on modern phones */
.safe-bottom { padding-bottom: max(1rem, env(safe-area-inset-bottom)); }

/* Smooth scroll */
html { scroll-behavior: smooth; }

/* Print tweaks for Results/Confirmation */
@media print {
  header, footer, .no-print, .btn { display: none !important; }
  main { padding: 0 !important; }
  .card { box-shadow: none !important; border: 1px solid #ddd !important; }
}


/* --- Subtle link + lead text helpers (optional) --- */
.lead { font-size: 1.0625rem; line-height: 1.6; color: rgb(75 85 99); } /* gray-600 */
.link-brand { color: hsl(var(--brand)); font-weight: 600; }
.link-brand:hover { text-decoration: underline; }



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\main.jsx ====
import React from "react";
import ReactDOM from "react-dom/client";
import { RouterProvider } from "react-router-dom";
import { router } from "./app/router";
import { AuthProvider } from "./app/auth";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <AuthProvider>
      <RouterProvider router={router} />
    </AuthProvider>
  </React.StrictMode>
);



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\app\auth.jsx ====
import React, { createContext, useContext, useEffect, useMemo, useState } from "react";
import { Navigate, useLocation } from "react-router-dom";
import { BRANCHES } from "../components/branches";

const AuthCtx = createContext(null);
export function useAuth(){ return useContext(AuthCtx); }

const LS_KEY = "app.auth";

/** Simple mock auth (replace with API later) */
export function AuthProvider({ children }){
  const [user, setUser] = useState(null);

  useEffect(() => {
    const raw = localStorage.getItem(LS_KEY);
    if (raw) {
      try { setUser(JSON.parse(raw)); } catch {}
    }
  }, []);

  const login = async ({ admissionNo, dob, branch }) => {
    if (!admissionNo || admissionNo.trim().length < 5) throw new Error("Invalid School/Admission Number.");
    if (!dob) throw new Error("Date of Birth is required.");
    if (!branch) throw new Error("Please select your campus.");

    // TODO: call backend with {admissionNo, dob, branch}
    const profile = {
      admissionNo: admissionNo.trim(),
      dob,
      branch, // "makurdi" | "gboko"
      name: "Okafor Chinedu",
      gender: "Male",
      class: "SS1 Science",
      state: "Benue",
      lga: "Makurdi",
      address: "12 Example Street, Benue",
      phone: "+2348000000000",
      email: "student@example.com",
    };
    localStorage.setItem(LS_KEY, JSON.stringify(profile));
    setUser(profile);
    return profile;
  };

  const logout = () => {
    localStorage.removeItem(LS_KEY);
    setUser(null);
  };

  const updateBranch = (branchId) => {
    setUser(prev => {
      if (!prev) return prev;
      const next = { ...prev, branch: branchId };
      localStorage.setItem(LS_KEY, JSON.stringify(next));
      return next;
    });
  };

  const value = useMemo(() => ({ user, login, logout, updateBranch, BRANCHES }), [user]);
  return <AuthCtx.Provider value={value}>{children}</AuthCtx.Provider>;
}

export function RequireAuth({ children }){
  const { user } = useAuth();
  const location = useLocation();
  if (!user) return <Navigate to="/student-login" replace state={{ from: location }} />;
  return children;
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\app\providers.jsx ====
import React from "react";
export default function Providers({ children }) { return <>{children}</>; }



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\app\router.jsx ====
import React from "react";
import { createBrowserRouter } from "react-router-dom";
import RootLayout from "../layouts/RootLayout";
import Landing from "../pages/landing/Landing";
import Info from "../pages/admissions/Info";
import Auth from "../pages/auth/Auth";
import Dashboard from "../pages/dashboard/Dashboard";
import ProgramSelect from "../pages/application/ProgramSelect";
import ApplicationWizard from "../pages/application/ApplicationWizard";
import ReviewPay from "../pages/application/ReviewPay";
import Confirmation from "../pages/application/Confirmation";
import Results from "../pages/results/Results";
import StudentLogin from "../pages/student/StudentLogin";
import Profile from "../pages/student/Profile";
import NotFound from "../pages/NotFound";
import { RequireAuth } from "./auth";

export const router = createBrowserRouter([
  {
    path: "/",
    element: <RootLayout />,
    errorElement: <NotFound />,
    children: [
      { index: true, element: <Landing /> },
      { path: "admissions/info", element: <Info /> },

      // (Optional legacy) generic auth + dashboard
      { path: "auth", element: <Auth /> },
      { path: "dashboard", element: <Dashboard /> },

      // Admissions flow
      { path: "apply/program", element: <ProgramSelect /> },
      { path: "apply/form", element: <ApplicationWizard /> },
      { path: "apply/review", element: <ReviewPay /> },
      { path: "apply/confirmation", element: <Confirmation /> },

      // Student area (protected)
      { path: "student-login", element: <StudentLogin /> },
      { path: "profile", element: <RequireAuth><Profile /></RequireAuth> },
      { path: "results", element: <RequireAuth><Results /></RequireAuth> },
    ],
  },
]);



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\components\branches.js ====
export const BRANCHES = [
  { id: "makurdi", label: "Makurdi" },
  { id: "gboko",   label: "Gboko"   },
];



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\components\nav\Navbar.jsx ====
import React, { useState } from "react";
import { Link, NavLink } from "react-router-dom";

const linkBase = "px-3 py-2 rounded-md text-sm font-medium";
const linkActive = "bg-white/10 text-white";
const linkIdle = "text-white/90 hover:bg-white/10";

export default function Navbar() {
  const [open, setOpen] = useState(false);

  return (
    <header className="sticky top-0 z-40 bg-[hsl(var(--brand))] text-white shadow">
      <nav className="container-wide h-16 flex items-center justify-between">
        <Link to="/" className="flex items-center gap-3">
          {/* Crest placeholder (swap with your logo later) */}
          <div className="size-8 rounded-full bg-white/90 grid place-items-center text-[hsl(var(--brand))] font-bold">E</div>
          <div className="leading-tight">
            <p className="font-extrabold">Emmanuel Foundation</p>
            <p className="text-xs text-white/80 -mt-0.5">Secondary School</p>
          </div>
        </Link>

        {/* Desktop links */}
        <div className="hidden md:flex items-center gap-1">
          <NavLink to="/" end className={({isActive}) => `${linkBase} ${isActive?linkActive:linkIdle}`}>Home</NavLink>
          <NavLink to="/admissions/apply" className={({isActive}) => `${linkBase} ${isActive?linkActive:linkIdle}`}>Apply</NavLink>
          <NavLink to="/admissions/status" className={({isActive}) => `${linkBase} ${isActive?linkActive:linkIdle}`}>Admission List</NavLink>
          <NavLink to="/results" className={({isActive}) => `${linkBase} ${isActive?linkActive:linkIdle}`}>Results</NavLink>
          <Link to="/contact" className="btn btn-accent ml-2">Contact</Link>
        </div>

        {/* Mobile */}
        <button
          onClick={() => setOpen(v => !v)}
          className="md:hidden inline-flex items-center justify-center size-10 rounded-lg hover:bg-white/10"
          aria-label="Toggle menu"
        >
          <span className="i">â˜°</span>
        </button>
      </nav>

      {/* Mobile drawer */}
      {open && (
        <div className="md:hidden bg-[hsl(var(--brand))] border-t border-white/10">
          <div className="container-wide py-3 grid gap-1">
            <NavLink onClick={()=>setOpen(false)} to="/" end className={({isActive}) => `${linkBase} ${isActive?linkActive:linkIdle}`}>Home</NavLink>
            <NavLink onClick={()=>setOpen(false)} to="/admissions/apply" className={({isActive}) => `${linkBase} ${isActive?linkActive:linkIdle}`}>Apply</NavLink>
            <NavLink onClick={()=>setOpen(false)} to="/admissions/status" className={({isActive}) => `${linkBase} ${isActive?linkActive:linkIdle}`}>Admission List</NavLink>
            <NavLink onClick={()=>setOpen(false)} to="/results" className={({isActive}) => `${linkBase} ${isActive?linkActive:linkIdle}`}>Results</NavLink>
            <Link onClick={()=>setOpen(false)} to="/contact" className="btn btn-accent mt-1 w-fit">Contact</Link>
          </div>
        </div>
      )}
    </header>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\components\ui\Button.jsx ====
import React from "react";

export default function Button({ as: Tag = "button", className = "", ...props }) {
  return (
    <Tag
      className={
        "inline-flex items-center justify-center rounded-md px-4 py-2 font-semibold " +
        "bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 " +
        "focus:ring-blue-400 focus:ring-offset-2 disabled:opacity-50 " + className
      }
      {...props}
    />
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\components\ui\Form.jsx ====
import React from "react";

export function Field({ label, value, onChange, type="text", placeholder, required, help }) {
  return (
    <label className="grid gap-1">
      <span className="text-sm font-semibold">{label}{required && <b className="text-red-600"> *</b>}</span>
      <input
        type={type}
        value={value}
        onChange={(e)=>onChange(e.target.value)}
        placeholder={placeholder}
        className="border rounded-lg px-3 py-2 outline-none focus:ring-2 focus:ring-[hsl(var(--brand))]"
        required={required}
      />
      {help && <p className="text-xs text-gray-500">{help}</p>}
    </label>
  );
}

export function Select({ label, value, onChange, options=[], required, disabled, help, placeholder="Select..." }) {
  return (
    <label className="grid gap-1">
      <span className="text-sm font-semibold">{label}{required && <b className="text-red-600"> *</b>}</span>
      <select
        value={value}
        onChange={(e)=>onChange(e.target.value)}
        className="border rounded-lg px-3 py-2 outline-none focus:ring-2 focus:ring-[hsl(var(--brand))]"
        required={required}
        disabled={disabled}
      >
        <option value="">{placeholder}</option>
        {options.map(o => <option key={o.value ?? o} value={o.value ?? o}>{o.label ?? o}</option>)}
      </select>
      {help && <p className="text-xs text-gray-500">{help}</p>}
    </label>
  );
}

export function FileField({ label, value, onChange, required, accept=".pdf,.jpg,.jpeg,.png", help }) {
  return (
    <label className="grid gap-1">
      <span className="text-sm font-semibold">{label}{required && <b className="text-red-600"> *</b>}</span>
      <input
        type="file"
        accept={accept}
        onChange={onChange}
        className="border rounded-lg px-3 py-2 file:mr-3 file:py-2 file:px-3 file:rounded-md file:border-0 file:bg-gray-100"
      />
      {value && <span className="text-xs text-gray-600">{value}</span>}
      {help && <p className="text-xs text-gray-500">{help}</p>}
    </label>
  );
}

export function Help({ children }) {
  return <p className="text-xs text-gray-500">{children}</p>;
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\components\ui\Inputs.jsx ====
import React from "react";

export const Input = React.forwardRef(({ label, error, className="", ...props }, ref) => (
  <label className="grid gap-1">
    {label && <span className="text-sm font-semibold">{label}</span>}
    <input ref={ref} className={`border rounded-lg px-3 py-2 outline-none focus:ring-2 focus:ring-[var(--blue)] ${className}`} {...props}/>
    {error && <span className="text-xs text-red-600">{error}</span>}
  </label>
));

export const Select = React.forwardRef(({ label, error, children, className="", ...props }, ref) => (
  <label className="grid gap-1">
    {label && <span className="text-sm font-semibold">{label}</span>}
    <select ref={ref} className={`border rounded-lg px-3 py-2 outline-none focus:ring-2 focus:ring-[var(--blue)] ${className}`} {...props}>
      {children}
    </select>
    {error && <span className="text-xs text-red-600">{error}</span>}
  </label>
));

export const NigeriaStates = [
  "Abia","Adamawa","Akwa Ibom","Anambra","Bauchi","Bayelsa","Benue","Borno","Cross River",
  "Delta","Ebonyi","Edo","Ekiti","Enugu","FCT","Gombe","Imo","Jigawa","Kaduna","Kano","Katsina",
  "Kebbi","Kogi","Kwara","Lagos","Nasarawa","Niger","Ogun","Ondo","Osun","Oyo","Plateau","Rivers",
  "Sokoto","Taraba","Yobe","Zamfara"
];



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\components\ui\Stepper.jsx ====
import React from "react";

export default function Stepper({ steps, current=0 }) {
  return (
    <ol className="flex items-center gap-2 overflow-x-auto no-scrollbar">
      {steps.map((s, i) => {
        const done = i < current;
        const active = i === current;
        return (
          <li key={s} className="flex items-center gap-2">
            <span
              className={[
                "inline-flex items-center justify-center size-7 rounded-full border text-xs font-bold",
                done ? "bg-[hsl(var(--brand))] text-white border-[hsl(var(--brand))]"
                     : active ? "bg-white border-[hsl(var(--brand))] text-[hsl(var(--brand))]"
                              : "bg-white border-gray-300 text-gray-500"
              ].join(" ")}
              aria-current={active?"step":undefined}
            >
              {i+1}
            </span>
            <span className={["text-xs sm:text-sm font-medium whitespace-nowrap",
              active ? "text-[hsl(var(--brand))]" : done ? "text-gray-600 line-through" : "text-gray-500"
            ].join(" ")}>
              {s}
            </span>
            {i < steps.length-1 && <span className="w-8 h-px bg-gray-200 mx-1 hidden sm:inline" />}
          </li>
        );
      })}
    </ol>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\components\ui\Toaster.jsx ====
import React from "react";

// super-lightweight toast (no library)
export function useToast() {
  const [toasts, setToasts] = React.useState([]);
  function show(msg, kind="info") {
    const id = crypto.randomUUID();
    setToasts(t => [...t, { id, msg, kind }]);
    setTimeout(() => setToasts(t => t.filter(x => x.id !== id)), 2500);
  }
  return { show, toasts, setToasts };
}

export function ToastHost({ toasts }) {
  return (
    <div className="fixed top-4 right-4 z-50 grid gap-2">
      {toasts.map(t => (
        <div key={t.id} className={`px-4 py-2 rounded-lg text-sm shadow
          ${t.kind==="success" ? "bg-green-600 text-white"
          : t.kind==="error" ? "bg-red-600 text-white" : "bg-gray-800 text-white"}`}>
          {t.msg}
        </div>
      ))}
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\hooks\useReveal.js ====
import { useEffect } from "react";

export default function useReveal() {
  useEffect(() => {
    const reveals = document.querySelectorAll(".reveal");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("revealed");
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.15 }
    );

    reveals.forEach((el) => observer.observe(el));

    return () => observer.disconnect();
  }, []);
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\layouts\RootLayout.jsx ====
import React, { useEffect, useRef, useState } from "react";
import { Outlet, Link, NavLink, useLocation } from "react-router-dom";

const cx = (...a) => a.filter(Boolean).join(" ");

function SectionLink({ onLanding, id, children, className }) {
  const href = onLanding ? `#${id}` : `/#${id}`;
  return (
    <a href={href} className={className}>
      <span className="relative inline-block">
        {children}
        <span className="absolute left-0 -bottom-1 h-[2px] w-0 bg-[hsl(var(--brand))] transition-all duration-300 group-hover:w-full" />
      </span>
    </a>
  );
}

export default function RootLayout() {
  const { pathname, hash } = useLocation();
  const onLanding = pathname === "/";
  const [open, setOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const panelRef = useRef(null);

  // shadow on scroll for desktop header
  useEffect(() => {
    const onScroll = () => setScrolled(window.scrollY > 6);
    onScroll();
    window.addEventListener("scroll", onScroll, { passive: true });
    return () => window.removeEventListener("scroll", onScroll);
  }, []);

  // close mobile panel on route/hash change
  useEffect(() => { setOpen(false); }, [pathname, hash]);

  // close when clicking outside panel (not strictly needed for full-screen, but safe)
  useEffect(() => {
    if (!open) return;
    const onDown = (e) => { if (panelRef.current && !panelRef.current.contains(e.target)) setOpen(false); };
    document.addEventListener("mousedown", onDown);
    return () => document.removeEventListener("mousedown", onDown);
  }, [open]);

  // lock page scroll when mobile menu is open
  useEffect(() => {
    document.documentElement.classList.toggle("overflow-hidden", open);
    return () => document.documentElement.classList.remove("overflow-hidden");
  }, [open]);

  const linkBase = "group relative px-3 py-2 text-sm font-medium text-gray-700 hover:text-[hsl(var(--brand))] transition";
  const activeLink = "text-[hsl(var(--brand))]";

  return (
    <div className="min-h-screen flex flex-col">
      {/* Header (light, always readable) */}
      <header
        className={cx(
          "sticky top-0 z-40 border-b bg-white/95 backdrop-blur transition",
          scrolled ? "shadow-sm border-gray-200" : "border-gray-200"
        )}
      >
        <nav className="container-wide h-16 flex items-center justify-between">
          {/* Brand */}
          <Link to="/" className="flex items-center gap-3">
            <div className="size-9 rounded-full bg-[hsl(var(--brand))] grid place-items-center text-white font-extrabold">E</div>
            <div className="leading-tight">
              <p className="font-extrabold font-display tracking-tight text-[hsl(var(--brand))]">
                Emmanuel Foundation
              </p>
              <p className="text-[11px] text-gray-500 -mt-0.5">Secondary School</p>
            </div>
          </Link>

          {/* Desktop nav */}
          <div className="hidden md:flex items-center gap-1">
            <NavLink end to="/" className={({ isActive }) => cx(linkBase, isActive && activeLink)}>
              <span className="relative inline-block">
                Home
                <span className="absolute left-0 -bottom-1 h-[2px] w-0 bg-[hsl(var(--brand))] transition-all duration-300 group-hover:w-full" />
              </span>
            </NavLink>

            <SectionLink onLanding={onLanding} id="about" className={linkBase}>About</SectionLink>
            <SectionLink onLanding={onLanding} id="blog" className={linkBase}>Blog</SectionLink>
            <SectionLink onLanding={onLanding} id="contact" className={linkBase}>Contact Us</SectionLink>

            <NavLink to="/profile" className={({ isActive }) => cx(linkBase, isActive && activeLink)}>
              <span className="relative inline-block">
                Student Profile
                <span className="absolute left-0 -bottom-1 h-[2px] w-0 bg-[hsl(var(--brand))] transition-all duration-300 group-hover:w-full" />
              </span>
            </NavLink>
          </div>

          {/* Desktop CTAs */}
          <div className="hidden md:flex items-center gap-2">
            <Link to="/admissions/info" className="btn btn-accent">Apply</Link>
            <Link to="/results" className="btn btn-primary">Results</Link>
          </div>

          {/* Mobile toggle */}
          <button
            onClick={() => setOpen((v) => !v)}
            className="md:hidden inline-flex items-center justify-center size-10 rounded-lg text-[hsl(var(--brand))] hover:bg-gray-100"
            aria-label="Open menu"
            aria-expanded={open}
            aria-controls="mobile-fullscreen"
          >
            {open ? "?" : "?"}
          </button>
        </nav>
      </header>

      {/* FULL-SCREEN MOBILE MENU (white background covering hero) */}
      <div
        id="mobile-fullscreen"
        className={cx(
          "md:hidden fixed inset-0 z-50 transition-opacity duration-200",
          open ? "opacity-100 pointer-events-auto" : "opacity-0 pointer-events-none"
        )}
      >
        <div
          ref={panelRef}
          className={cx(
            "absolute inset-0 bg-white flex flex-col",
            "animate-in fade-in duration-150"
          )}
        >
          {/* Top bar inside overlay */}
          <div className="h-16 border-b border-gray-200 flex items-center justify-between px-4">
            <div className="flex items-center gap-2">
              <div className="size-8 rounded-full bg-[hsl(var(--brand))] grid place-items-center text-white font-bold">E</div>
              <span className="font-display text-lg text-[hsl(var(--brand))]">Emmanuel Foundation</span>
            </div>
            <button
              onClick={() => setOpen(false)}
              className="size-10 -m-2 rounded-lg text-gray-700 hover:bg-gray-100"
              aria-label="Close menu"
            >
              ?
            </button>
          </div>

          {/* Menu list */}
          <div className="flex-1 overflow-y-auto">
            <div className="px-4 py-4 grid gap-2">
              <NavLink
                end
                to="/"
                onClick={() => setOpen(false)}
                className={({ isActive }) =>
                  cx("px-3 py-3 rounded-lg text-base font-medium",
                    isActive ? "bg-gray-100 text-[hsl(var(--brand))]" : "text-gray-800 hover:bg-gray-50")
                }
              >
                Home
              </NavLink>

              <a href="/#about" onClick={() => setOpen(false)} className="px-3 py-3 rounded-lg text-base font-medium text-gray-800 hover:bg-gray-50">
                About
              </a>
              <a href="/#blog" onClick={() => setOpen(false)} className="px-3 py-3 rounded-lg text-base font-medium text-gray-800 hover:bg-gray-50">
                Blog
              </a>
              <a href="/#contact" onClick={() => setOpen(false)} className="px-3 py-3 rounded-lg text-base font-medium text-gray-800 hover:bg-gray-50">
                Contact Us
              </a>

              <NavLink
                to="/profile"
                onClick={() => setOpen(false)}
                className={({ isActive }) =>
                  cx("px-3 py-3 rounded-lg text-base font-medium",
                    isActive ? "bg-gray-100 text-[hsl(var(--brand))]" : "text-gray-800 hover:bg-gray-50")
                }
              >
                Student Profile
              </NavLink>
            </div>

            <div className="px-4 pt-2 pb-6 grid gap-2">
              <Link to="/admissions/info" onClick={() => setOpen(false)} className="btn btn-accent w-full">Apply</Link>
              <Link to="/results" onClick={() => setOpen(false)} className="btn btn-primary w-full">Results</Link>
            </div>
          </div>

          {/* Footer inside overlay */}
          <div className="border-t border-gray-200 px-4 py-3 text-xs text-gray-500">
            © {new Date().getFullYear()} Emmanuel Foundation
          </div>
        </div>
      </div>

      {/* Page content */}
      <main className="flex-1"><Outlet /></main>

      {/* Footer */}
      <footer className="bg-[#0f172a] text-white">
        <div className="container-wide py-12 grid gap-8 md:grid-cols-4">
          <div>
            <p className="font-display text-2xl leading-none">Emmanuel Foundation</p>
            <p className="text-sm text-white/70 mt-1">Secondary School</p>
            <p className="text-sm text-white/70 mt-4">Excellence, discipline & character for modern learners.</p>
          </div>
          <div>
            <p className="font-semibold mb-2">Explore</p>
            <ul className="text-white/90 text-sm space-y-1">
              <li><Link to="/admissions/info" className="hover:underline">Admissions</Link></li>
              <li><Link to="/results" className="hover:underline">Check Results</Link></li>
              <li><a href="/#blog" className="hover:underline">Blog</a></li>
              <li><a href="/#contact" className="hover:underline">Contact</a></li>
            </ul>
          </div>
          <div>
            <p className="font-semibold mb-2">Contact</p>
            <p className="text-sm text-white/90">info@emmanuelfoundation.edu.ng</p>
            <p className="text-sm text-white/90">+234 800 000 0000</p>
            <p className="text-sm text-white/90">City, State, Nigeria</p>
          </div>
          <div>
            <p className="font-semibold mb-2">Newsletter</p>
            <form onSubmit={(e)=>{e.preventDefault(); alert("Subscribed (demo)");}} className="grid gap-2">
              <input className="bg-white/10 border border-white/20 rounded-lg px-3 py-2 placeholder-white/60" placeholder="Your email" />
              <button className="btn btn-accent">Subscribe</button>
            </form>
          </div>
        </div>
        <div className="border-t border-white/10">
          <div className="container-wide py-4 text-xs text-white/60">
            © {new Date().getFullYear()} Emmanuel Foundation Secondary School. All rights reserved.
          </div>
        </div>
      </footer>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\lib\api.js ====
const BASE_URL = import.meta.env.VITE_API_URL ?? "http://localhost:4000/api";

export async function apiGet(path) {
  const res = await fetch(`${BASE_URL}${path}`, { credentials: "include" });
  if (!res.ok) throw new Error(`GET ${path} failed`);
  return res.json();
}

export async function apiPost(path, body) {
  const res = await fetch(`${BASE_URL}${path}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    credentials: "include",
    body: JSON.stringify(body),
  });
  if (!res.ok) throw new Error(`POST ${path} failed`);
  return res.json();
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\NotFound.jsx ====
import React from "react";
import { Link } from "react-router-dom";

export default function NotFound() {
  return (
    <div className="min-h-[50vh] grid place-items-center p-10 text-center">
      <div>
        <h1 className="text-2xl font-bold mb-2">Page not found</h1>
        <Link to="/" className="text-[var(--blue)] underline">Back to Home</Link>
      </div>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\admissions\AdmissionsInfo.jsx ====
import React from "react";
import { Link } from "react-router-dom";

const Check = () => (
  <svg viewBox="0 0 24 24" className="size-4"><path fill="currentColor" d="M9 16.2l-3.5-3.5-1.4 1.4L9 19 20.3 7.7l-1.4-1.4z"/></svg>
);
const Calendar = () => (
  <svg viewBox="0 0 24 24" className="size-4"><path fill="currentColor" d="M7 2h2v2h6V2h2v2h3v18H4V4h3V2zm13 8H6v10h14V10zM6 8h14V6H6v2z"/></svg>
);
const Naira = () => (
  <svg viewBox="0 0 24 24" className="size-4"><path fill="currentColor" d="M7 4h2l6 8V4h2v8h2v2h-2v6h-2v-6H9v6H7v-6H5v-2h2V4zm2 8h6l-6-8v8z"/></svg>
);
const Arrow = () => (
  <svg viewBox="0 0 24 24" className="size-4"><path fill="currentColor" d="M4 11h12.17l-4.58-4.59L13 5l7 7-7 7-1.41-1.41L16.17 13H4z"/></svg>
);

function Pill({ children }) {
  return <span className="inline-flex items-center gap-2 px-3 py-1 rounded-full bg-gray-100 text-gray-700 text-xs font-semibold">{children}</span>;
}

function PathCard({ tag, title, items, cta }) {
  return (
    <article className="card p-5 hover:shadow-lg transition">
      <div className="flex items-center gap-2 text-[hsl(var(--brand))]">
        <Check /> <span className="text-xs font-semibold">{tag}</span>
      </div>
      <h3 className="mt-2 font-semibold text-lg">{title}</h3>
      <ul className="mt-3 space-y-2 text-sm text-gray-700">
        {items.map((t) => (
          <li key={t} className="flex items-start gap-2">
            <span className="mt-1 size-4 text-[hsl(var(--brand))]"><Check /></span>
            <span>{t}</span>
          </li>
        ))}
      </ul>
      {cta}
    </article>
  );
}

export default function AdmissionsInfo() {
  return (
    <div className="bg-white">
      {/* Sub-hero header */}
      <section className="relative border-b border-black/5">
        <div className="absolute inset-0 bg-[hsl(var(--brand))] opacity-[.03]" />
        <div className="container-wide py-10 md:py-14">
          <p className="kicker">Admissions</p>
          <h1 className="font-display text-3xl sm:text-4xl mt-2">Apply to Emmanuel Foundation</h1>
          <p className="text-gray-600 mt-2 prose-max">
            A simple, clear process. Choose your campus (Makurdi or Gboko), entry class, and provide the required documents.
          </p>
          <div className="mt-4 flex flex-wrap items-center gap-2 text-xs">
            <Pill><Calendar /> 2025/2026 Admissions</Pill>
            <Pill><Naira /> Application Fee: ?10,000</Pill>
          </div>
        </div>
      </section>

      {/* Main content */}
      <section className="container-wide py-10 md:py-14">
        <div className="grid lg:grid-cols-[1fr_320px] gap-8">
          {/* Left column */}
          <div className="grid gap-8">
            {/* Paths */}
            <div>
              <h2 className="font-display text-2xl">Entry Pathways</h2>
              <p className="text-gray-600 text-sm mt-1">Requirements depend on your selection.</p>
              <div className="grid md:grid-cols-3 gap-4 mt-4">
                <PathCard
                  tag="JSS1 — New"
                  title="Junior Secondary Entry"
                  items={["FSLC (First School Leaving Certificate)", "Makurdi or Gboko campus", "Entrance assessment"]}
                  cta={<Link to="/apply/program" className="btn btn-primary w-full mt-4">Start JSS Application</Link>}
                />
                <PathCard
                  tag="SS1 — New"
                  title="Senior Secondary Entry"
                  items={["FSLC", "Junior WAEC (BECE)", "Choose Stream: Science, Arts, Commercial"]}
                  cta={<Link to="/apply/program" className="btn btn-primary w-full mt-4">Start SS Application</Link>}
                />
                <PathCard
                  tag="JSS/SS — Transfer"
                  title="Transfer Students"
                  items={[
                    "JSS1–JSS3: FSLC + Transfer Letter + Previous School name",
                    "SS1–SS3: FSLC + Junior WAEC + Previous School name",
                  ]}
                  cta={<Link to="/apply/program" className="btn btn-primary w-full mt-4">Start Transfer Application</Link>}
                />
              </div>
            </div>

            {/* Timeline */}
            <div className="card p-5">
              <h2 className="font-semibold">Timeline</h2>
              <div className="mt-3 grid sm:grid-cols-3 gap-3">
                {[
                  ["Applications Open", "Jan 10, 2025"],
                  ["Entrance Assessments", "Mar 15–29, 2025"],
                  ["Admissions List", "Apr 10, 2025"],
                ].map(([k, v]) => (
                  <div key={k} className="rounded-lg border border-gray-200 p-3">
                    <div className="text-xs text-gray-500">{k}</div>
                    <div className="font-semibold">{v}</div>
                  </div>
                ))}
              </div>
              <p className="text-xs text-gray-500 mt-3">Dates may adjust slightly; you’ll be notified via email/SMS.</p>
            </div>

            {/* Fees */}
            <div className="card p-5">
              <h2 className="font-semibold">Fees</h2>
              <div className="grid sm:grid-cols-2 gap-3 mt-3">
                <div className="rounded-lg border border-gray-200 p-3">
                  <div className="text-xs text-gray-500">Application Fee</div>
                  <div className="font-semibold">?10,000</div>
                </div>
                <div className="rounded-lg border border-gray-200 p-3">
                  <div className="text-xs text-gray-500">Acceptance (upon offer)</div>
                  <div className="font-semibold">Notified in offer</div>
                </div>
              </div>
              <p className="text-xs text-gray-500 mt-3">
                Fees are non-refundable. Secure card, bank transfer, and USSD options available at payment.
              </p>
            </div>

            {/* FAQs / Notes */}
            <div className="card p-5">
              <h2 className="font-semibold">Helpful Notes</h2>
              <ul className="mt-3 space-y-2 text-sm text-gray-700">
                <li>• Uploads must be PDF/JPG/PNG and not exceed 2MB each.</li>
                <li>• Ensure names and dates match official certificates.</li>
                <li>• For transfers, ensure your previous school details are accurate.</li>
              </ul>
            </div>
          </div>

          {/* Right column (sticky) */}
          <aside className="lg:sticky lg:top-24 h-max">
            <div className="card p-5">
              <h3 className="font-semibold">Get Started</h3>
              <p className="text-sm text-gray-600 mt-1">Pick your campus and class in a few clicks.</p>
              <Link to="/apply/program" className="btn btn-primary w-full mt-3">Begin Application</Link>
              <Link to="/student-login" className="btn bg-gray-100 font-semibold hover:bg-gray-200 w-full mt-2">Student Login</Link>
              <hr className="my-4" />
              <div className="text-xs text-gray-600 grid gap-2">
                <div className="flex items-center gap-2"><Calendar /> Mon–Fri: 8:00–16:00</div>
                <div className="flex items-center gap-2"><Naira /> Paystack/Flutterwave supported</div>
              </div>
              <a href="#requirements" className="text-[hsl(var(--brand))] text-sm font-semibold inline-flex items-center gap-1 mt-4">
                View requirements <Arrow />
              </a>
            </div>
          </aside>
        </div>
      </section>

      {/* Requirements anchor (nice spacing for anchor jump) */}
      <section id="requirements" className="container-wide pb-12 scroll-section">
        <div className="rounded-2xl border border-gray-200 p-5 md:p-6 bg-gray-50">
          <h2 className="font-display text-2xl">All Requirements (Quick View)</h2>
          <div className="grid md:grid-cols-2 gap-4 mt-4">
            <div className="rounded-xl bg-white border border-gray-200 p-4">
              <h4 className="font-semibold">New Students</h4>
              <ul className="mt-2 text-sm text-gray-700 space-y-1">
                <li>• JSS1: FSLC</li>
                <li>• SS1: FSLC + Junior WAEC (BECE)</li>
              </ul>
            </div>
            <div className="rounded-xl bg-white border border-gray-200 p-4">
              <h4 className="font-semibold">Transfer Students</h4>
              <ul className="mt-2 text-sm text-gray-700 space-y-1">
                <li>• JSS1–JSS3: FSLC + Transfer Letter + Previous School</li>
                <li>• SS1–SS3: FSLC + Junior WAEC (BECE) + Previous School</li>
              </ul>
            </div>
          </div>
          <div className="mt-4 text-sm text-gray-600">
            Files must be clear scans; unclear documents may delay processing.
          </div>
        </div>
      </section>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\admissions\Apply.jsx ====
import React, { useState } from "react";
export default function Apply() {
  const [form, setForm] = useState({ firstName:"", lastName:"", email:"", program:"" });
  function onChange(e){ setForm(f => ({...f, [e.target.name]: e.target.value})); }
  function onSubmit(e){ e.preventDefault(); alert("Submitted (mock)."); }
  return (
    <div className="max-w-3xl mx-auto px-6 py-10">
      <h2 className="text-2xl font-bold mb-6">Admission Application</h2>
      <form onSubmit={onSubmit} className="grid gap-4 bg-white shadow p-6 rounded-lg">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <input className="border rounded p-3" name="firstName" placeholder="First Name" value={form.firstName} onChange={onChange}/>
          <input className="border rounded p-3" name="lastName" placeholder="Last Name" value={form.lastName} onChange={onChange}/>
        </div>
        <input className="border rounded p-3" name="email" placeholder="Email" value={form.email} onChange={onChange}/>
        <select className="border rounded p-3" name="program" value={form.program} onChange={onChange}>
          <option value="">Select Program</option>
          <option value="BSc Computer Science">BSc Computer Science</option>
          <option value="BSc Economics">BSc Economics</option>
          <option value="B.Eng Electrical">B.Eng Electrical</option>
        </select>
        <button className="bg-blue-600 text-white px-4 py-2 rounded font-semibold hover:bg-blue-700">Submit Application</button>
      </form>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\admissions\Info.jsx ====
// src/pages/admissions/Info.jsx
import React from "react";
import { Link } from "react-router-dom";

export default function Info() {
  return (
    <div className="bg-white">
      {/* Slim hero */}
      <section className="border-b border-black/5">
        <div className="container-wide py-12">
          <p className="kicker">Admissions</p>
          <h1 className="font-display text-4xl leading-tight mt-2">Admissions 2025/2026</h1>
          <p className="text-gray-600 mt-2 prose-max">
            Choose campus (Makurdi or Gboko), select entry class, and upload the required documents.
          </p>
          <div className="mt-5 flex flex-wrap gap-3">
            <span className="px-3 py-1 rounded-full bg-gray-100 text-gray-700 text-xs font-semibold">Applications Open: Jan 10, 2025</span>
            <span className="px-3 py-1 rounded-full bg-gray-100 text-gray-700 text-xs font-semibold">Application Fee: â‚¦10,000</span>
          </div>
          <div className="mt-6 flex flex-col sm:flex-row gap-3">
            <Link to="/apply/program" className="btn btn-primary w-full sm:w-auto">Start Application</Link>
            <Link to="/profile" className="w-full sm:w-auto px-4 py-2 rounded-xl font-semibold bg-gray-100 hover:bg-gray-200 text-center">
              Student Login
            </Link>
          </div>
        </div>
      </section>

      {/* Three simple pathway cards */}
      <section className="container-wide py-12">
        <div className="grid md:grid-cols-3 gap-5">
          <article className="card p-6">
            <span className="text-xs font-semibold text-[hsl(var(--brand))]">JSS1 â€” New</span>
            <h3 className="font-semibold text-lg mt-1">Junior Secondary Entry</h3>
            <ul className="mt-3 text-sm text-gray-700 space-y-2">
              <li>â€¢ FSLC (First School Leaving Certificate)</li>
              <li>â€¢ Makurdi or Gboko campus</li>
              <li>â€¢ Entrance assessment</li>
            </ul>
            <Link to="/apply/program" className="btn btn-primary w-full mt-4">Apply</Link>
          </article>

          <article className="card p-6">
            <span className="text-xs font-semibold text-[hsl(var(--brand))]">SS1 â€” New</span>
            <h3 className="font-semibold text-lg mt-1">Senior Secondary Entry</h3>
            <ul className="mt-3 text-sm text-gray-700 space-y-2">
              <li>â€¢ FSLC</li>
              <li>â€¢ Junior WAEC (BECE)</li>
              <li>â€¢ Choose stream: Science, Arts, Commercial</li>
            </ul>
            <Link to="/apply/program" className="btn btn-primary w-full mt-4">Apply</Link>
          </article>

          <article className="card p-6">
            <span className="text-xs font-semibold text-[hsl(var(--brand))]">JSS/SS â€” Transfer</span>
            <h3 className="font-semibold text-lg mt-1">Transfer Students</h3>
            <ul className="mt-3 text-sm text-gray-700 space-y-2">
              <li>â€¢ JSS1â€“JSS3: FSLC + Transfer Letter + Previous School</li>
              <li>â€¢ SS1â€“SS3: FSLC + Junior WAEC + Previous School</li>
            </ul>
            <Link to="/apply/program" className="btn btn-primary w-full mt-4">Apply</Link>
          </article>
        </div>
      </section>

      {/* Requirements + Timeline + Fees (simple three-up grid) */}
      <section className="container-wide pb-14">
        <div className="grid lg:grid-cols-3 gap-5">
          <div className="card p-6">
            <h3 className="font-semibold">Key Requirements</h3>
            <ul className="mt-3 text-sm text-gray-700 space-y-2">
              <li>â€¢ FSLC (all entries)</li>
              <li>â€¢ Junior WAEC (BECE) for SS1 New & SS Transfers</li>
              <li>â€¢ Transfer Letter & Previous School (for JSS Transfers)</li>
              <li>â€¢ Birth certificate & passport photo</li>
            </ul>
            <p className="text-xs text-gray-500 mt-3">Uploads: PDF/JPG/PNG â€¢ Max 2MB each</p>
          </div>

          <div className="card p-6">
            <h3 className="font-semibold">Timeline</h3>
            <div className="mt-3 grid gap-3 text-sm">
              <div className="rounded-lg border border-gray-200 p-3">
                <div className="text-xs text-gray-500">Applications Open</div>
                <div className="font-semibold">Jan 10, 2025</div>
              </div>
              <div className="rounded-lg border border-gray-200 p-3">
                <div className="text-xs text-gray-500">Entrance Assessments</div>
                <div className="font-semibold">Mar 15â€“29, 2025</div>
              </div>
              <div className="rounded-lg border border-gray-200 p-3">
                <div className="text-xs text-gray-500">Admissions List</div>
                <div className="font-semibold">Apr 10, 2025</div>
              </div>
            </div>
          </div>

          <div className="card p-6">
            <h3 className="font-semibold">Fees</h3>
            <div className="mt-3 grid gap-3 text-sm">
              <div className="rounded-lg border border-gray-200 p-3">
                <div className="text-xs text-gray-500">Application Fee</div>
                <div className="font-semibold">â‚¦10,000</div>
              </div>
              <div className="rounded-lg border border-gray-200 p-3">
                <div className="text-xs text-gray-500">Acceptance (if admitted)</div>
                <div className="font-semibold">Communicated in offer</div>
              </div>
            </div>
            <p className="text-xs text-gray-500 mt-3">Pay with card, bank transfer, or USSD.</p>
          </div>
        </div>
      </section>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\admissions\Status.jsx ====
import React, { useState } from "react";
export default function Status() {
  const [email, setEmail] = useState("");
  const [status, setStatus] = useState(null);
  function check(e){ e.preventDefault(); setStatus({ decision:"Admitted", program:"BSc Computer Science" }); }
  return (
    <div className="max-w-2xl mx-auto px-6 py-10">
      <h2 className="text-2xl font-bold mb-6">Check Admission Status</h2>
      <form onSubmit={check} className="flex gap-3">
        <input className="border rounded p-3 flex-1" placeholder="Your application email" value={email} onChange={e=>setEmail(e.target.value)} />
        <button className="bg-blue-600 text-white px-4 py-2 rounded font-semibold hover:bg-blue-700">Check</button>
      </form>
      {status && (
        <div className="mt-6 bg-white shadow rounded p-4">
          <p className="font-semibold">Decision: <span className="text-green-700">{status.decision}</span></p>
          <p>Program: {status.program}</p>
        </div>
      )}
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\application\ApplicationWizard.jsx ====
import React from "react";
import { useNavigate } from "react-router-dom";
import Stepper from "../../components/ui/Stepper";
import { Field, Select, FileField, Help } from "../../components/ui/Form";

const STEPS = ["Personal", "Guardian", "Academics", "Uploads", "Declaration"];

function useLocalState(key, init){
  const [v, setV] = React.useState(()=> {
    try { return JSON.parse(localStorage.getItem(key)) ?? init; } catch { return init; }
  });
  React.useEffect(()=>{ localStorage.setItem(key, JSON.stringify(v)); }, [key, v]);
  return [v, setV];
}

const genders = ["Male","Female"];

function isSenior(c){ return String(c).startsWith("SS"); }
function isJunior(c){ return String(c).startsWith("JSS"); }

function getRules(program){
  const { entryClass, applicantType } = program || {};
  return {
    needFSLC: true,
    needJnrWaec: (applicantType==="new" && entryClass==="SS1") || (applicantType==="transfer" && isSenior(entryClass)),
    needTransferLetter: applicantType==="transfer" && isJunior(entryClass),
    needPrevSchool: applicantType==="transfer",
  };
}

export default function ApplicationWizard(){
  const nav = useNavigate();
  const program = React.useMemo(()=> JSON.parse(localStorage.getItem("app.program")||"{}"), []);
  const rules = getRules(program);

  const [current, setCurrent] = React.useState(() => {
    const j = localStorage.getItem("app.wizard.jumpTo");
    localStorage.removeItem("app.wizard.jumpTo");
    const i = Number(j);
    return Number.isInteger(i) && i>=0 && i<STEPS.length ? i : 0;
  });

  const [personal, setPersonal] = useLocalState("app.personal", {
    firstName:"", lastName:"", dob:"", gender:"", state:"", lga:"", phone:"", email:"", address:""
  });
  const [guardian, setGuardian] = useLocalState("app.guardian", {
    name:"", rel:"", job:"", phone:"", email:""
  });
  const [academics, setAcademics] = useLocalState("app.academics", {
    previousSchool:""
  });
  const [uploads, setUploads] = useLocalState("app.uploads", {
    fslc:"", juniorWaec:"", transferLetter:""
  });
  const [declare, setDeclare] = useLocalState("app.declare", false);

  function toast(msg){ alert(msg); return false; }

  function validateStep(i){
    if(i===0){
      const req = ["firstName","lastName","dob","gender","state","lga","phone","address"];
      for(const k of req){ if(!personal[k]) return toast(`Please fill ${k.replace(/([A-Z])/g," $1")}.`); }
      return true;
    }
    if(i===1){
      const req = ["name","rel","phone"];
      for(const k of req){ if(!guardian[k]) return toast(`Please fill guardian ${k}.`); }
      return true;
    }
    if(i===2){
      if(rules.needPrevSchool && !academics.previousSchool) return toast("Please provide previous school name.");
      return true;
    }
    if(i===3){
      if(rules.needFSLC && !uploads.fslc) return toast("Please upload FSLC.");
      if(rules.needJnrWaec && !uploads.juniorWaec) return toast("Please upload Junior WAEC (BECE).");
      if(rules.needTransferLetter && !uploads.transferLetter) return toast("Please upload Transfer Letter.");
      return true;
    }
    if(i===4){
      if(!declare) return toast("Please confirm the declaration to proceed.");
      return true;
    }
    return true;
  }

  function handleFile(e, key){
    const file = e.target.files?.[0];
    if(!file) return;
    if(file.size > 2 * 1024 * 1024) { alert("Max file size is 2MB."); e.target.value=""; return; }
    const entry = `${file.name} • ${(file.size/1024).toFixed(0)} KB`;
    setUploads(u => ({ ...u, [key]: entry }));
  }

  function next(){ if(validateStep(current)) setCurrent(c=>Math.min(c+1, STEPS.length-1)); }
  function prev(){ setCurrent(c=>Math.max(c-1, 0)); }

  const summaryRows = [
    ["Campus", program.branch==="makurdi"?"Makurdi":program.branch==="gboko"?"Gboko":"—"],
    ["Entry Class", program.entryClass || "—"],
    ["Type", program.applicantType==="transfer"?"Transfer":"New"],
    ["Stream", isSenior(program.entryClass) ? (program.stream || "—") : "—"],
    ["Name", `${personal.firstName||"—"} ${personal.lastName||""}`.trim()],
    ["DOB", personal.dob || "—"],
    ["Guardian", guardian.name || "—"],
    ["Prev. School", rules.needPrevSchool ? (academics.previousSchool || "—") : "—"],
    ["FSLC", uploads.fslc ? "? Uploaded" : "—"],
    ["Jnr WAEC", rules.needJnrWaec ? (uploads.juniorWaec ? "? Uploaded" : "—") : "—"],
    ["Transfer Letter", rules.needTransferLetter ? (uploads.transferLetter ? "? Uploaded" : "—") : "—"],
  ];

  return (
    <div className="container-wide py-6 md:py-10">
      {/* Header */}
      <div className="flex items-center justify-between gap-3">
        <div>
          <p className="kicker">Application</p>
          <h2 className="font-display text-2xl sm:text-3xl">Fill Your Details</h2>
        </div>
        <div className="text-xs sm:text-sm text-gray-600">
          {program.entryClass || "—"} {isSenior(program.entryClass)&&program.stream?`• ${program.stream}`:""} • {program.applicantType==="transfer"?"Transfer":"New"}
        </div>
      </div>

      {/* Stepper */}
      <div className="mt-4 md:mt-6">
        <Stepper steps={STEPS} current={current}/>
      </div>

      {/* Layout: form + sticky summary */}
      <div className="mt-4 md:mt-6 grid lg:grid-cols-[1fr_320px] gap-6">
        {/* Form card */}
        <div className="card p-5 sm:p-6 grid gap-4">
          {current===0 && (
            <div className="grid gap-3">
              <div className="grid sm:grid-cols-2 gap-3">
                <Field label="First Name" value={personal.firstName} onChange={v=>setPersonal(p=>({...p, firstName:v}))} required />
                <Field label="Last Name" value={personal.lastName} onChange={v=>setPersonal(p=>({...p, lastName:v}))} required />
              </div>
              <div className="grid sm:grid-cols-3 gap-3">
                <Field type="date" label="Date of Birth" value={personal.dob} onChange={v=>setPersonal(p=>({...p, dob:v}))} required />
                <Select label="Gender" value={personal.gender} onChange={v=>setPersonal(p=>({...p, gender:v}))}
                        options={genders.map(g=>({label:g, value:g}))} required />
                <Field label="Phone" value={personal.phone} onChange={v=>setPersonal(p=>({...p, phone:v}))} required />
              </div>
              <div className="grid sm:grid-cols-2 gap-3">
                <Field label="Email" value={personal.email} onChange={v=>setPersonal(p=>({...p, email:v}))} placeholder="optional" />
                <Field label="State of Origin" value={personal.state} onChange={v=>setPersonal(p=>({...p, state:v}))} required />
              </div>
              <div className="grid sm:grid-cols-2 gap-3">
                <Field label="LGA" value={personal.lga} onChange={v=>setPersonal(p=>({...p, lga:v}))} required />
                <Field label="Home Address" value={personal.address} onChange={v=>setPersonal(p=>({...p, address:v}))} required />
              </div>
              <Help>Use your legal name as it appears on certificates.</Help>
            </div>
          )}

          {current===1 && (
            <div className="grid gap-3">
              <Field label="Guardian Full Name" value={guardian.name} onChange={v=>setGuardian(g=>({...g, name:v}))} required />
              <div className="grid sm:grid-cols-3 gap-3">
                <Select label="Relationship" value={guardian.rel} onChange={v=>setGuardian(g=>({...g, rel:v}))}
                        options={[{label:"Parent", value:"Parent"},{label:"Guardian", value:"Guardian"},{label:"Other", value:"Other"}]} required />
                <Field label="Occupation" value={guardian.job} onChange={v=>setGuardian(g=>({...g, job:v}))} />
                <Field label="Phone" value={guardian.phone} onChange={v=>setGuardian(g=>({...g, phone:v}))} required />
              </div>
              <Field label="Email" value={guardian.email} onChange={v=>setGuardian(g=>({...g, email:v}))} placeholder="optional" />
              <Help>Provide a reachable phone number for notifications.</Help>
            </div>
          )}

          {current===2 && (
            <div className="grid gap-3">
              <p className="text-sm text-gray-600">Academic info. {program.applicantType==="transfer" ? <b>Previous school is required for transfer students.</b> : "New students may leave previous school blank."}</p>
              <Field label="Previous School" value={academics.previousSchool} onChange={v=>setAcademics(a=>({...a, previousSchool:v}))} required={rules.needPrevSchool} />
            </div>
          )}

          {current===3 && (
            <div className="grid gap-3">
              <div className="bg-gray-50 border border-black/5 rounded-lg p-3 text-sm">
                <b>Required for your selection ({program.entryClass} • {program.applicantType==="transfer" ? "Transfer":"New"}):</b>
                <ul className="list-disc pl-5 mt-1">
                  <li>FSLC</li>
                  {rules.needJnrWaec && <li>Junior WAEC (BECE)</li>}
                  {rules.needTransferLetter && <li>Transfer Letter</li>}
                  {rules.needPrevSchool && <li>Previous School Name</li>}
                </ul>
              </div>
              <FileField label="FSLC (First School Leaving Certificate)" required value={uploads.fslc} onChange={(e)=>handleFile(e,"fslc")} help="PDF/JPG/PNG • Max 2MB" />
              {rules.needJnrWaec && (
                <FileField label="Junior WAEC (BECE)" required value={uploads.juniorWaec} onChange={(e)=>handleFile(e,"juniorWaec")} help="PDF/JPG/PNG • Max 2MB" />
              )}
              {rules.needTransferLetter && (
                <FileField label="Transfer Letter" required value={uploads.transferLetter} onChange={(e)=>handleFile(e,"transferLetter")} help="PDF/JPG/PNG • Max 2MB" />
              )}
            </div>
          )}

          {current===4 && (
            <div className="grid gap-3">
              <label className="flex items-start gap-2">
                <input type="checkbox" checked={declare} onChange={e=>setDeclare(e.target.checked)} />
                <span className="text-sm">
                  I confirm the information provided is accurate and I agree to the school&apos;s NDPR-compliant policy.
                </span>
              </label>
              <div className="bg-yellow-50 border border-yellow-200 text-yellow-800 rounded-lg p-3 text-sm">
                Tip: You can always go back and edit before submission.
              </div>
            </div>
          )}
        </div>

        {/* Sticky summary (desktop) */}
        <aside className="hidden lg:block">
          <div className="sticky top-24 card p-5">
            <h3 className="font-semibold">Live Summary</h3>
            <dl className="mt-3 grid gap-2 text-sm">
              {summaryRows.map(([k,v]) => (
                <div key={k} className="flex">
                  <dt className="w-36 text-gray-500">{k}</dt>
                  <dd className="font-medium">{v}</dd>
                </div>
              ))}
            </dl>
            <button
              onClick={()=>{ if(validateStep(current)) window.location.href="/apply/review"; }}
              className="btn btn-primary w-full mt-4"
              disabled={current<STEPS.length-1}
              title={current<STEPS.length-1 ? "Complete all steps first" : ""}
            >
              Review & Submit
            </button>
          </div>
        </aside>
      </div>

      {/* Floating controls (mobile-first) */}
      <div className="md:hidden fixed inset-x-0 bottom-0 z-30 bg-white/95 backdrop-blur border-t border-gray-200 px-4 py-3 flex items-center justify-between gap-3">
        <button onClick={prev} disabled={current===0} className={["px-4 py-2 rounded-lg font-semibold",
          current===0 ? "bg-gray-200 text-gray-400 cursor-not-allowed" : "bg-gray-100 hover:bg-gray-200"].join(" ")}>
          Previous
        </button>
        {current<STEPS.length-1 ? (
          <button onClick={next} className="btn btn-primary">Next</button>
        ) : (
          <button onClick={()=>{ if(validateStep(4)) window.location.href="/apply/review"; }} className="btn btn-primary">Review</button>
        )}
      </div>

      {/* Desktop controls */}
      <div className="hidden md:flex items-center justify-between mt-4">
        <button onClick={prev} disabled={current===0} className={["px-4 py-2 rounded-lg font-semibold",
          current===0 ? "bg-gray-200 text-gray-400 cursor-not-allowed" : "bg-gray-100 hover:bg-gray-200"].join(" ")}>
          Previous
        </button>
        {current<STEPS.length-1 ? (
          <button onClick={next} className="btn btn-primary">Next</button>
        ) : (
          <button onClick={()=>{ if(validateStep(4)) window.location.href="/apply/review"; }} className="btn btn-primary">Review</button>
        )}
      </div>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\application\Confirmation.jsx ====
import React from "react";
import { Link } from "react-router-dom";

export default function Confirmation(){
  const appId = localStorage.getItem("app.applicationId");
  const program = JSON.parse(localStorage.getItem("app.program")||"{}");
  const personal = JSON.parse(localStorage.getItem("app.personal")||"{}");

  return (
    <div className="container-wide py-16 text-center">
      <div className="mx-auto max-w-xl card p-8">
        <div className="size-14 rounded-full bg-green-100 text-green-700 grid place-items-center mx-auto text-2xl">?</div>
        <h2 className="font-display text-3xl mt-4">Application Submitted</h2>
        <p className="text-gray-700 mt-2">Thank you, {personal.firstName} {personal.lastName}. We have received your application.</p>

        <div className="bg-gray-50 rounded-lg p-4 mt-5 text-left">
          <p className="text-sm"><b>Application ID:</b> {appId || "—"}</p>
          <p className="text-sm"><b>Level:</b> {program.level || "—"} • Campus: {(program.branch==="makurdi"?"Makurdi":program.branch==="gboko"?"Gboko":"—")} {program.stream ? `• ${program.stream}` : ""}</p>
          <p className="text-sm"><b>Submitted:</b> {new Date().toLocaleString()}</p>
        </div>

        <div className="flex flex-col sm:flex-row gap-3 justify-center mt-6">
          <Link to="/dashboard" className="btn btn-primary">Go to Dashboard</Link>
          <button onClick={()=>window.print()} className="btn btn-accent">Print Confirmation</button>
        </div>
      </div>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\application\ProgramSelect.jsx ====
import React from "react";
import { useNavigate } from "react-router-dom";
import { BRANCHES } from "../../components/branches";

const ENTRY_CLASSES = ["JSS1","JSS2","JSS3","SS1","SS2","SS3"];
const STREAMS = ["Science","Arts","Commercial"]; // for SS only

function Icon({ name }) {
  // Lightweight inline icons (no library)
  const map = {
    campus: <svg viewBox="0 0 24 24" className="size-5"><path fill="currentColor" d="M12 3l10 6-10 6-10-6 10-6Zm0 8.7L20 7.1v6.2L12 18l-8-4.7V7.1l8 4.6Z"/></svg>,
    book:   <svg viewBox="0 0 24 24" className="size-5"><path fill="currentColor" d="M3 4h13a3 3 0 013 3v13H6a3 3 0 01-3-3V4Zm3 2v11a1 1 0 001 1h11V7a1 1 0 00-1-1H6Z"/></svg>,
    arrow:  <svg viewBox="0 0 24 24" className="size-5"><path fill="currentColor" d="M13 5l7 7-7 7v-4H4v-6h9V5z"/></svg>
  };
  return <span className="text-[hsl(var(--brand))]">{map[name] || map.book}</span>;
}

export default function ProgramSelect() {
  const nav = useNavigate();
  const [branch, setBranch] = React.useState("");
  const [entryClass, setEntryClass] = React.useState("");
  const [applicantType, setApplicantType] = React.useState(""); // new | transfer
  const [stream, setStream] = React.useState("");

  const isSenior = (c)=>String(c).startsWith("SS");

  function proceed() {
    if (!branch || !entryClass || !applicantType) return;
    const payload = { branch, entryClass, applicantType, stream: isSenior(entryClass) ? stream : "" };
    localStorage.setItem("app.program", JSON.stringify(payload));
    nav("/apply/form");
  }

  return (
    <div className="container-wide py-10">
      <div className="text-center">
        <p className="kicker">Admissions</p>
        <h2 className="font-display text-3xl sm:text-4xl mt-2">Choose Your Path</h2>
        <p className="text-gray-600 mt-2">Select campus, entry class, and type of applicant.</p>
      </div>

      {/* Selection grid */}
      <div className="mt-8 grid lg:grid-cols-3 gap-5">
        {/* Column 1: Campus */}
        <section className="card p-5 sm:p-6">
          <div className="flex items-center gap-2">
            <Icon name="campus" /><h3 className="font-semibold">Campus</h3>
          </div>
          <div className="grid gap-3 mt-4">
            {BRANCHES.map(b => {
              const active = branch === b.id;
              return (
                <button
                  key={b.id}
                  onClick={()=>setBranch(b.id)}
                  className={[
                    "rounded-xl border px-4 py-3 text-left transition",
                    active ? "border-[hsl(var(--brand))] bg-[hsl(var(--brand))/0.06]" : "border-gray-200 hover:bg-gray-50"
                  ].join(" ")}
                >
                  <div className="font-medium">{b.label}</div>
                  <div className="text-xs text-gray-600">Benue State, Nigeria</div>
                </button>
              );
            })}
          </div>
        </section>

        {/* Column 2: Entry Class */}
        <section className="card p-5 sm:p-6">
          <div className="flex items-center gap-2">
            <Icon name="book" /><h3 className="font-semibold">Entry Class</h3>
          </div>
          <div className="grid grid-cols-3 gap-2 mt-4">
            {ENTRY_CLASSES.map(c => {
              const active = entryClass === c;
              return (
                <button
                  key={c}
                  onClick={()=>{ setEntryClass(c); if(!String(c).startsWith("SS")) setStream(""); }}
                  className={[
                    "rounded-xl border px-3 py-2 text-sm font-semibold transition",
                    active ? "border-[hsl(var(--brand))] bg-[hsl(var(--brand))/0.06]" : "border-gray-200 hover:bg-gray-50"
                  ].join(" ")}
                >
                  {c}
                </button>
              );
            })}
          </div>

          {/* Stream for SS */}
          <div className="mt-4">
            <label className="text-sm font-semibold">Stream (SS only)</label>
            <select
              className="mt-1 border rounded-lg w-full px-3 py-2 outline-none focus:ring-2 focus:ring-[hsl(var(--brand))]"
              value={stream}
              onChange={(e)=>setStream(e.target.value)}
              disabled={!isSenior(entryClass)}
            >
              <option value="">Select stream</option>
              {STREAMS.map(s => <option key={s} value={s}>{s}</option>)}
            </select>
            {!isSenior(entryClass) && <p className="text-xs text-gray-500 mt-1">Stream not required for JSS.</p>}
          </div>
        </section>

        {/* Column 3: Type + Summary */}
        <section className="card p-5 sm:p-6">
          <div className="flex items-center gap-2">
            <Icon name="arrow" /><h3 className="font-semibold">Applicant Type</h3>
          </div>
          <div className="grid grid-cols-2 gap-2 mt-4">
            {[
              { id:"new", label:"New" },
              { id:"transfer", label:"Transfer" },
            ].map(t => {
              const active = applicantType === t.id;
              return (
                <button
                  key={t.id}
                  onClick={()=>setApplicantType(t.id)}
                  className={[
                    "rounded-xl border px-3 py-2 font-semibold transition",
                    active ? "border-[hsl(var(--brand))] bg-[hsl(var(--brand))/0.06]" : "border-gray-200 hover:bg-gray-50"
                  ].join(" ")}
                >
                  {t.label}
                </button>
              );
            })}
          </div>

          {/* Inline requirements hint */}
          <div className="mt-5 bg-yellow-50 border border-yellow-200 text-yellow-800 rounded-lg p-3 text-sm">
            <b>Heads-up:</b> Requirements depend on your selection.
            <ul className="list-disc pl-5 mt-1 space-y-0.5">
              <li><b>JSS1 (New):</b> FSLC</li>
              <li><b>SS1 (New):</b> FSLC + Junior WAEC</li>
              <li><b>JSS Transfer:</b> FSLC + Transfer Letter + Previous School</li>
              <li><b>SS Transfer:</b> FSLC + Junior WAEC + Previous School</li>
            </ul>
          </div>

          <button
            onClick={proceed}
            disabled={!branch || !entryClass || !applicantType || (isSenior(entryClass) && !stream)}
            className={[
              "btn mt-4 w-full",
              (!branch || !entryClass || !applicantType || (isSenior(entryClass) && !stream))
                ? "bg-gray-300 text-gray-600 cursor-not-allowed"
                : "btn-primary"
            ].join(" ")}
          >
            Continue
          </button>
        </section>
      </div>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\application\ReviewPay.jsx ====
import React from "react";
import { useNavigate } from "react-router-dom";

function Row({ label, value }) {
  return (
    <div className="flex text-sm">
      <dt className="w-44 text-gray-500">{label}</dt>
      <dd className="font-medium">{value || "—"}</dd>
    </div>
  );
}

function isSenior(entryClass){ return String(entryClass).startsWith("SS"); }
function isJunior(entryClass){ return String(entryClass).startsWith("JSS"); }

function requiredUploads(program){
  const { entryClass, applicantType } = program || {};
  // Rules:
  // New JSS1: FSLC
  // New SS1: FSLC + Junior WAEC
  // Transfer JSS1–JSS3: FSLC + Transfer Letter + Previous School
  // Transfer SS1–SS3: FSLC + Junior WAEC + Previous School
  return {
    needFSLC: true,
    needJnrWaec: (applicantType==="new" && entryClass==="SS1") || (applicantType==="transfer" && isSenior(entryClass)),
    needTransferLetter: applicantType==="transfer" && isJunior(entryClass),
    needPrevSchool: applicantType==="transfer",
  };
}

function ruleSentence(program){
  const r = requiredUploads(program);
  const items = [];
  if (r.needFSLC) items.push("FSLC");
  if (r.needJnrWaec) items.push("Junior WAEC (BECE)");
  if (r.needTransferLetter) items.push("Transfer Letter");
  if (r.needPrevSchool) items.push("Previous School Name");
  const typ = program.applicantType==="transfer" ? "Transfer" : "New";
  const cls = program.entryClass || "—";
  return { text: `Because you selected ${cls} (${typ}), required uploads: ${items.join(", ")}.`, items };
}

export default function ReviewPay(){
  const nav = useNavigate();

  const program   = JSON.parse(localStorage.getItem("app.program")   || "{}");
  const personal  = JSON.parse(localStorage.getItem("app.personal")  || "{}");
  const guardian  = JSON.parse(localStorage.getItem("app.guardian")  || "{}");
  const academics = JSON.parse(localStorage.getItem("app.academics") || "{}");
  const uploads   = JSON.parse(localStorage.getItem("app.uploads")   || "{}");
  const declare   = JSON.parse(localStorage.getItem("app.declare")   || "false");

  const rule = ruleSentence(program);

  function edit(stepIndex){
    localStorage.setItem("app.wizard.jumpTo", String(stepIndex));
    nav("/apply/form");
  }

  function submitApplication(){
    const id = `EF-${new Date().getFullYear()}-${Math.random().toString(36).slice(2,8).toUpperCase()}`;
    localStorage.setItem("app.applicationId", id);
    nav("/apply/confirmation");
  }

  return (
    <div className="container-wide py-10">
      <div className="flex items-center justify-between">
        <h2 className="font-display text-3xl">Review Your Application</h2>
        <button onClick={()=>nav(-1)} className="text-sm text-gray-600 hover:underline">Back</button>
      </div>

      {/* Program */}
      <section className="card p-6 mt-6">
        <div className="flex items-center justify-between">
          <h3 className="font-semibold">Program</h3>
          <button onClick={()=>edit(0)} className="text-sm text-[hsl(var(--brand))] hover:underline">Edit</button>
        </div>
        <dl className="grid md:grid-cols-2 gap-x-8 gap-y-3 mt-3">
          <Row label="Campus" value={program.branch==="makurdi" ? "Makurdi" : program.branch==="gboko" ? "Gboko" : "—"} />
          <Row label="Entry Class" value={program.entryClass}/>
          <Row label="Applicant Type" value={program.applicantType==="transfer" ? "Transfer" : "New"}/>
          <Row label="Stream (Senior)" value={program.stream}/>
        </dl>

        {/* Rule label */}
        <div className="mt-4 bg-yellow-50 border border-yellow-200 text-yellow-800 rounded-lg p-3 text-sm">
          {rule.text}
        </div>
      </section>

      {/* Personal */}
      <section className="card p-6 mt-6">
        <div className="flex items-center justify-between">
          <h3 className="font-semibold">Personal Details</h3>
          <button onClick={()=>edit(0)} className="text-sm text-[hsl(var(--brand))] hover:underline">Edit</button>
        </div>
        <dl className="grid md:grid-cols-2 gap-x-8 gap-y-3 mt-3">
          <Row label="First Name" value={personal.firstName}/>
          <Row label="Last Name" value={personal.lastName}/>
          <Row label="Date of Birth" value={personal.dob}/>
          <Row label="Gender" value={personal.gender}/>
          <Row label="State of Origin" value={personal.state}/>
          <Row label="LGA" value={personal.lga}/>
          <Row label="Phone" value={personal.phone}/>
          <Row label="Email" value={personal.email}/>
          <Row label="Address" value={personal.address}/>
        </dl>
      </section>

      {/* Guardian */}
      <section className="card p-6 mt-6">
        <div className="flex items-center justify-between">
          <h3 className="font-semibold">Guardian</h3>
          <button onClick={()=>edit(1)} className="text-sm text-[hsl(var(--brand))] hover:underline">Edit</button>
        </div>
        <dl className="grid md:grid-cols-2 gap-x-8 gap-y-3 mt-3">
          <Row label="Full Name" value={guardian.name}/>
          <Row label="Relationship" value={guardian.rel}/>
          <Row label="Occupation" value={guardian.job}/>
          <Row label="Phone" value={guardian.phone}/>
          <Row label="Email" value={guardian.email}/>
        </dl>
      </section>

      {/* Academics */}
      <section className="card p-6 mt-6">
        <div className="flex items-center justify-between">
          <h3 className="font-semibold">Academic Info</h3>
          <button onClick={()=>edit(2)} className="text-sm text-[hsl(var(--brand))] hover:underline">Edit</button>
        </div>
        <dl className="grid md:grid-cols-2 gap-x-8 gap-y-3 mt-3">
          <Row label="Previous School (if transfer)" value={academics.previousSchool}/>
        </dl>
      </section>

      {/* Uploads */}
      <section className="card p-6 mt-6">
        <div className="flex items-center justify-between">
          <h3 className="font-semibold">Uploads</h3>
          <button onClick={()=>edit(3)} className="text-sm text-[hsl(var(--brand))] hover:underline">Edit</button>
        </div>
        <dl className="grid md:grid-cols-2 gap-x-8 gap-y-3 mt-3">
          <Row label="FSLC" value={uploads.fslc}/>
          <Row label="Junior WAEC (BECE)" value={uploads.juniorWaec}/>
          <Row label="Transfer Letter" value={uploads.transferLetter}/>
        </dl>
        <p className="text-xs text-gray-500 mt-2">* Max 2MB per file. Formats: PDF/JPG/PNG.</p>
      </section>

      {/* Declaration */}
      <section className="card p-6 mt-6">
        <div className="flex items-center justify-between">
          <h3 className="font-semibold">Declaration</h3>
          <button onClick={()=>edit(4)} className="text-sm text-[hsl(var(--brand))] hover:underline">Edit</button>
        </div>
        <p className="text-sm mt-2">
          {declare ? "? You confirmed the information is accurate and agree to the NDPR policy." : "— Not yet confirmed"}
        </p>
      </section>

      {/* Submit */}
      <div className="flex flex-col sm:flex-row items-center justify-end gap-3 mt-6">
        <button onClick={()=>nav("/apply/form")} className="px-4 py-2 rounded-lg bg-gray-100 font-semibold hover:bg-gray-200">
          Back to Form
        </button>
        <button
          onClick={submitApplication}
          className="btn btn-primary"
          disabled={!declare}
          title={!declare ? "Please accept the declaration in the form." : ""}
        >
          Submit Application (Mock)
        </button>
      </div>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\auth\Auth.jsx ====
import React from "react";
import { useNavigate } from "react-router-dom";

export default function Auth() {
  const [tab, setTab] = React.useState("login"); // "login" | "signup"
  const [otpStage, setOtpStage] = React.useState(false);
  const nav = useNavigate();

  function handleSignup(e){
    e.preventDefault();
    // Mock: show OTP stage after sign up
    setOtpStage(true);
  }
  function verifyOtp(e){
    e.preventDefault();
    // Mock success ? go to dashboard
    nav("/dashboard");
  }
  function handleLogin(e){
    e.preventDefault();
    // Mock success ? go to dashboard
    nav("/dashboard");
  }

  return (
    <div className="max-w-md mx-auto px-6 py-10">
      <div className="bg-white rounded-xl border border-black/5 p-6 shadow-sm">
        <div className="flex gap-2 mb-4">
          <button onClick={()=>{setTab("login"); setOtpStage(false);}}
            className={`px-4 py-2 rounded-lg font-semibold ${tab==="login"?"bg-[var(--blue)] text-white":"bg-gray-100"}`}>
            Login
          </button>
          <button onClick={()=>{setTab("signup"); setOtpStage(false);}}
            className={`px-4 py-2 rounded-lg font-semibold ${tab==="signup"?"bg-[var(--blue)] text-white":"bg-gray-100"}`}>
            Sign Up
          </button>
        </div>

        {tab==="signup" && !otpStage && (
          <form onSubmit={handleSignup} className="grid gap-3">
            <label className="grid gap-1">
              <span className="text-sm font-semibold">Full Name</span>
              <input className="border rounded-lg px-3 py-2 focus:ring-2 focus:ring-[var(--blue)] outline-none" required/>
            </label>
            <label className="grid gap-1">
              <span className="text-sm font-semibold">Email</span>
              <input type="email" className="border rounded-lg px-3 py-2 focus:ring-2 focus:ring-[var(--blue)] outline-none" required/>
            </label>
            <label className="grid gap-1">
              <span className="text-sm font-semibold">Phone (+234...)</span>
              <input type="tel" className="border rounded-lg px-3 py-2 focus:ring-2 focus:ring-[var(--blue)] outline-none" required/>
            </label>
            <label className="grid gap-1">
              <span className="text-sm font-semibold">Password</span>
              <input type="password" className="border rounded-lg px-3 py-2 focus:ring-2 focus:ring-[var(--blue)] outline-none" required/>
            </label>
            <label className="flex items-center gap-2 text-sm">
              <input type="checkbox" required/> I agree to the terms
            </label>
            <button className="bg-[var(--blue)] text-white px-4 py-2 rounded-lg font-semibold hover:brightness-110">
              Create Account
            </button>
          </form>
        )}

        {tab==="signup" && otpStage && (
          <form onSubmit={verifyOtp} className="grid gap-3">
            <p className="text-sm text-gray-600">Enter the OTP sent to your email/phone.</p>
            <label className="grid gap-1">
              <span className="text-sm font-semibold">OTP Code</span>
              <input inputMode="numeric" className="border rounded-lg px-3 py-2 focus:ring-2 focus:ring-[var(--blue)] outline-none" required/>
            </label>
            <button className="bg-[var(--green)] text-white px-4 py-2 rounded-lg font-semibold hover:brightness-110">
              Verify & Continue
            </button>
          </form>
        )}

        {tab==="login" && (
          <form onSubmit={handleLogin} className="grid gap-3">
            <label className="grid gap-1">
              <span className="text-sm font-semibold">Email or Phone</span>
              <input className="border rounded-lg px-3 py-2 focus:ring-2 focus:ring-[var(--blue)] outline-none" required/>
            </label>
            <label className="grid gap-1">
              <span className="text-sm font-semibold">Password</span>
              <input type="password" className="border rounded-lg px-3 py-2 focus:ring-2 focus:ring-[var(--blue)] outline-none" required/>
            </label>
            <div className="text-right text-sm">
              <a className="text-[var(--blue)]" href="#">Forgot Password?</a>
            </div>
            <button className="bg-[var(--blue)] text-white px-4 py-2 rounded-lg font-semibold hover:brightness-110">
              Login
            </button>
          </form>
        )}
      </div>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\dashboard\Dashboard.jsx ====
import React from "react";
import { useNavigate, Link } from "react-router-dom";

export default function Dashboard() {
  const nav = useNavigate();
  return (
    <div className="max-w-5xl mx-auto px-6 py-10">
      <h2 className="text-2xl font-extrabold">Hello, Applicant</h2>
      <div className="grid md:grid-cols-3 gap-4 mt-6">
        <div className="bg-white border border-black/5 rounded-xl p-5">
          <p className="text-gray-600 text-sm">Status</p>
          <p className="font-bold mt-1">Not Started</p>
        </div>
        <div className="bg-white border border-black/5 rounded-xl p-5">
          <p className="text-gray-600 text-sm">Applications</p>
          <p className="font-bold mt-1">0</p>
        </div>
        <div className="bg-white border border-black/5 rounded-xl p-5">
          <p className="text-gray-600 text-sm">Actions</p>
          <button onClick={()=>nav("/apply/program")} className="mt-2 bg-[var(--blue)] text-white px-4 py-2 rounded-lg font-semibold">
            Start New Application
          </button>
        </div>
      </div>
      <p className="mt-6 text-sm text-gray-600">Or go back to <Link to="/" className="text-[var(--blue)] underline">Home</Link>.</p>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\home\Welcome.jsx ====
import React from "react";
import { Link } from "react-router-dom";

export default function Welcome() {
  return (
    <div>
      {/* HERO */}
      <section className="relative overflow-hidden text-white">
        <div className="absolute inset-0 bg-[hsl(var(--brand-600))]"></div>
        <div className="absolute inset-0 bg-gradient-to-r from-black/0 via-black/0 to-black/15"></div>

        <div className="container-wide relative py-16 md:py-24 text-center">
          <span className="badge badge-accent mb-4">Founded on Excellence & Character</span>
          <h1 className="text-4xl md:text-5xl font-extrabold leading-tight">
            Emmanuel Foundation Secondary School
          </h1>
          <p className="mt-4 text-white/90 max-w-2xl mx-auto">
            Nurturing bright minds with strong values. Apply for admission, view the admission list, and check results â€” all online.
          </p>
          <div className="mt-8 flex flex-col sm:flex-row items-center justify-center gap-3">
            <Link to="/admissions/apply" className="btn btn-primary">Apply for 2025/2026</Link>
            <Link to="/admissions/status" className="btn btn-ghost">Check Admission List</Link>
          </div>
        </div>
      </section>

      {/* FEATURE CARDS */}
      <section className="container-wide py-12 md:py-16">
        <div className="grid md:grid-cols-3 gap-6">
          <article className="card p-6">
            <div className="size-10 rounded-lg bg-[hsl(var(--brand))/0.08] grid place-items-center mb-4">ðŸŽ“</div>
            <h3 className="font-bold text-lg mb-2">Admissions</h3>
            <p className="text-[hsl(var(--muted))]">Simple online application with guided steps. Receive email updates.</p>
            <Link to="/admissions/apply" className="mt-4 inline-block text-[hsl(var(--brand))] font-semibold">Start Application â†’</Link>
          </article>
          <article className="card p-6">
            <div className="size-10 rounded-lg bg-[hsl(var(--brand))/0.08] grid place-items-center mb-4">ðŸ“œ</div>
            <h3 className="font-bold text-lg mb-2">Admission List</h3>
            <p className="text-[hsl(var(--muted))]">Instantly check admission status by email or application ID.</p>
            <Link to="/admissions/status" className="mt-4 inline-block text-[hsl(var(--brand))] font-semibold">Check Status â†’</Link>
          </article>
          <article className="card p-6">
            <div className="size-10 rounded-lg bg-[hsl(var(--brand))/0.08] grid place-items-center mb-4">ðŸ“Š</div>
            <h3 className="font-bold text-lg mb-2">Results</h3>
            <p className="text-[hsl(var(--muted))]">Secure results portal with session filtering and printable sheets.</p>
            <Link to="/results" className="mt-4 inline-block text-[hsl(var(--brand))] font-semibold">View Results â†’</Link>
          </article>
        </div>
      </section>

      {/* ANNOUNCEMENTS */}
      <section className="container-wide pb-10">
        <div className="card p-6">
          <h3 className="text-xl font-bold mb-3">Announcements</h3>
          <ul className="space-y-2 text-[hsl(var(--muted))]">
            <li>â€¢ 2025/2026 Admissions now open.</li>
            <li>â€¢ Orientation for new students: Oct 15, 2025.</li>
            <li>â€¢ PTA Meeting: Nov 2, 2025.</li>
          </ul>
        </div>
      </section>

      {/* STATS */}
      <section className="container-wide pb-16">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {[
            { label: "Years of Excellence", value: "25+" },
            { label: "Certified Teachers", value: "60+" },
            { label: "Average Class Size", value: "25" },
            { label: "Alumni Universities", value: "50+" },
          ].map(s => (
            <div key={s.label} className="card p-5 text-center">
              <div className="text-3xl font-extrabold text-[hsl(var(--brand))]">{s.value}</div>
              <div className="text-xs mt-1 text-[hsl(var(--muted))]">{s.label}</div>
            </div>
          ))}
        </div>
      </section>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\landing\Landing.jsx ====
import React from "react";
import useReveal from "../../hooks/useReveal";
import heroImg from "../../assets/hero.jpg"; // optional; replace or remove
import { Link } from "react-router-dom";

export default function Landing() {
  useReveal();

  return (
    <div>
      {/* ===== HERO ===== */}
      <section
        className="relative"
        style={{
          backgroundImage: heroImg ? `url(${heroImg})` : undefined,
          backgroundSize: "cover",
          backgroundPosition: "center",
        }}
      >
        {/* Overlay */}
        <div className={`absolute inset-0 ${heroImg ? "bg-black/55" : "bg-[hsl(var(--brand))]"}`} />
        {/* Subtle light blobs */}
        <div
          aria-hidden
          className="absolute inset-0 opacity-15"
          style={{
            backgroundImage:
              "radial-gradient(900px 400px at 10% 20%, #fff 0, transparent 60%), radial-gradient(700px 400px at 90% 30%, #fff 0, transparent 60%)",
          }}
        />
        <div className="relative container-wide min-h-[70vh] md:min-h-[78vh] py-16 md:py-24 text-white grid">
          <div className="place-self-center text-center prose-max px-2">
            <span className="kicker reveal">Makurdi â€¢ Gboko â€¢ Benue State</span>
            <h1 className="font-display leading-tight mt-3 reveal delay-1 text-4xl sm:text-5xl md:text-6xl">
              Emmanuel Foundation Secondary School
            </h1>
            <p className="mt-4 text-white/90 reveal delay-2 text-base sm:text-lg">
              Excellence, discipline, and character â€” preparing students for WAEC/NECO and life.
            </p>
            <div className="mt-7 sm:mt-8 flex flex-col sm:flex-row items-center justify-center gap-3 reveal delay-3">
              <Link to="/admissions/info" className="btn btn-accent w-full sm:w-auto">Apply for Admission</Link>
              <Link to="/results" className="btn btn-ghost w-full sm:w-auto">Access Results</Link>
            </div>
          </div>
        </div>
      </section>

      {/* ===== HIGHLIGHTS STRIP ===== */}
      <section className="bg-white border-y border-black/5">
        <div className="container-wide py-6 grid grid-cols-2 md:grid-cols-4 gap-4">
          {[
            { t: "Small Class Size", s: "Avg. 25 students" },
            { t: "Qualified Staff", s: "60+ certified teachers" },
            { t: "STEM & Clubs", s: "Robotics â€¢ Debate â€¢ ICT" },
            { t: "Strong Values", s: "Discipline & leadership" },
          ].map((x) => (
            <div key={x.t} className="flex items-start gap-3 reveal">
              <div className="size-9 shrink-0 rounded-full bg-[hsl(var(--brand))] text-white grid place-items-center font-bold">âœ“</div>
              <div>
                <p className="font-semibold">{x.t}</p>
                <p className="text-sm text-gray-600">{x.s}</p>
              </div>
            </div>
          ))}
        </div>
      </section>

      {/* ===== PROGRAMS / ENTRY PATHS ===== */}
      <section className="container-wide py-14 md:py-16">
        <div className="text-center">
          <h2 className="font-display text-3xl sm:text-4xl reveal">Admissions Pathways</h2>
          <p className="text-gray-600 mt-2 reveal">Choose your entry route and campus.</p>
        </div>
        <div className="grid md:grid-cols-3 gap-5 mt-8">
          {[
            {
              tag: "JSS1 â€” New",
              title: "Junior Secondary Entry",
              points: ["FSLC required", "Makurdi or Gboko", "Entrance assessment"],
              href: "/apply/program",
            },
            {
              tag: "SS1 â€” New",
              title: "Senior Secondary Entry",
              points: ["FSLC + Junior WAEC (BECE)", "Stream: Science/Arts/Commercial", "Makurdi or Gboko"],
              href: "/apply/program",
            },
            {
              tag: "Transfer (JSS/SS)",
              title: "Transfer Admissions",
              points: ["From JSS1â€“JSS3: FSLC + Transfer Letter", "From SS1â€“SS3: FSLC + Junior WAEC", "Previous school name"],
              href: "/apply/program",
            },
          ].map((c) => (
            <article key={c.title} className="card p-6 hover:shadow-lg transition reveal">
              <span className="badge badge-accent">{c.tag}</span>
              <h3 className="font-semibold text-lg mt-2">{c.title}</h3>
              <ul className="mt-3 text-sm text-gray-700 space-y-1">
                {c.points.map((p) => <li key={p}>â€¢ {p}</li>)}
              </ul>
              <Link to={c.href} className="btn btn-primary mt-4 w-full">Start Application</Link>
            </article>
          ))}
        </div>
      </section>

      {/* ===== ABOUT ===== */}
      <section id="about" className="container-wide py-14 md:py-16 scroll-section">
        <div className="grid md:grid-cols-2 gap-8 md:gap-10 items-start">
          <div className="reveal prose-max">
            <h2 className="font-display text-3xl sm:text-4xl">About Emmanuel Foundation</h2>
            <p className="text-gray-700 mt-3 text-sm sm:text-base">
              For over two decades, weâ€™ve nurtured bright minds with a balanced focus on academics, discipline,
              and values. Our labs, clubs, and mentorship programs build confidence and real-world skills.
            </p>
            <ul className="mt-5 text-gray-700 space-y-2 text-sm sm:text-base">
              <li>â€¢ State-of-the-art science & ICT labs</li>
              <li>â€¢ Leadership & character development</li>
              <li>â€¢ Strong alumni network and outcomes</li>
            </ul>
            <div className="mt-6 flex gap-3">
              <Link to="/admissions/info" className="btn btn-primary">Admissions Info</Link>
              <a href="#contact" className="btn bg-gray-100 font-semibold hover:bg-gray-200">Contact Us</a>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3 reveal delay-1">
            <div className="card overflow-hidden h-40 sm:h-48 md:h-56">
              <div className="img-cover bg-gradient-to-br from-blue-200 to-blue-100 h-full" />
            </div>
            <div className="card overflow-hidden h-40 sm:h-48 md:h-56">
              <div className="img-cover bg-gradient-to-br from-amber-200 to-amber-100 h-full" />
            </div>
            <div className="card overflow-hidden h-40 sm:h-48 md:h-56">
              <div className="img-cover bg-gradient-to-br from-emerald-200 to-emerald-100 h-full" />
            </div>
            <div className="card overflow-hidden h-40 sm:h-48 md:h-56">
              <div className="img-cover bg-gradient-to-br from-fuchsia-200 to-fuchsia-100 h-full" />
            </div>
          </div>
        </div>
      </section>

      {/* ===== STATS BAND ===== */}
      <section className="bg-[hsl(var(--brand))] text-white">
        <div className="container-wide py-10 grid grid-cols-2 md:grid-cols-4 gap-6 text-center">
          {[
            ["Years of Excellence", "25+"],
            ["Certified Teachers", "60+"],
            ["Avg. Class Size", "25"],
            ["Clubs & Societies", "15+"],
          ].map(([k, v]) => (
            <div key={k} className="reveal">
              <div className="text-3xl font-extrabold">{v}</div>
              <div className="text-sm text-white/80 mt-1">{k}</div>
            </div>
          ))}
        </div>
      </section>

      {/* ===== BLOG PREVIEW ===== */}
      <section id="blog" className="bg-gray-50 border-y border-black/5 scroll-section">
        <div className="container-wide py-14 md:py-16">
          <div className="flex items-end justify-between gap-4 reveal">
            <h2 className="font-display text-3xl sm:text-4xl">From Our Blog</h2>
            <a href="#" className="hidden sm:inline text-[hsl(var(--brand))] font-semibold">View all â†’</a>
          </div>
          <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-5 sm:gap-6 mt-6">
            {[
              { title: "Entrance Exam Tips for JSS1 Applicants", date: "Sep 15, 2025" },
              { title: "How We Support WAEC/NECO Success", date: "Sep 01, 2025" },
              { title: "Clubs Spotlight: Robotics & Debate", date: "Aug 20, 2025" },
            ].map((post, i) => (
              <article key={i} className="card overflow-hidden transition hover:-translate-y-1 hover:shadow-xl reveal delay-1">
                <div className="h-40 sm:h-44 md:h-48 bg-gradient-to-br from-blue-200 to-blue-100" />
                <div className="p-4 sm:p-5">
                  <span className="text-xs px-2 py-1 rounded-full bg-[hsl(var(--brand))/0.08] text-[hsl(var(--brand))]">{post.date}</span>
                  <h3 className="font-semibold mt-2 text-base sm:text-lg">{post.title}</h3>
                  <p className="text-gray-600 text-sm mt-2">
                    Helpful insights for students and parents to thrive at Emmanuel Foundation.
                  </p>
                  <a href="#" className="text-[hsl(var(--brand))] font-semibold inline-block mt-3">Read more â†’</a>
                </div>
              </article>
            ))}
          </div>
          <div className="sm:hidden mt-4">
            <a href="#" className="text-[hsl(var(--brand))] font-semibold">View all â†’</a>
          </div>
        </div>
      </section>

      {/* ===== TESTIMONIALS ===== */}
      <section id="testimonials" className="bg-white scroll-section">
        <div className="container-wide py-14 md:py-16">
          <h2 className="font-display text-3xl sm:text-4xl text-center reveal">What Parents Say</h2>
          <div className="mt-8 overflow-x-auto snap-x snap-mandatory no-scrollbar">
            <div className="flex gap-4 min-w-full px-2">
              {[
                { name: "Mrs. Adeyemi", text: "My daughterâ€™s confidence and grades improved tremendously. The teachers truly care." },
                { name: "Mr. Okonkwo", text: "Discipline with kindness â€” Emmanuel Foundation builds character and excellence." },
                { name: "Mrs. Hassan", text: "The labs, clubs, and mentorship are top-notch. Highly recommend the school!" },
                { name: "Mr. Ibrahim", text: "Excellent communication with parents and strong academic support for students." },
              ].map((t, i) => (
                <figure key={i} className="snap-center shrink-0 w-[88%] sm:w-[340px] md:w-[380px] card p-5 sm:p-6 reveal">
                  <div className="text-3xl leading-none">â€œ</div>
                  <blockquote className="text-gray-700 mt-2 text-sm sm:text-base">{t.text}</blockquote>
                  <figcaption className="mt-4 font-semibold text-[hsl(var(--brand))]">â€” {t.name}</figcaption>
                </figure>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* ===== CONTACT CTA ===== */}
      <section id="contact" className="relative overflow-hidden scroll-section">
        <div className="absolute inset-0 bg-[hsl(var(--brand))]" />
        <div className="absolute inset-0 opacity-20" style={{ backgroundImage: "radial-gradient(600px 300px at 20% 30%, #fff, transparent 60%)" }} />
        <div className="relative container-wide py-14 md:py-16 text-white">
          <div className="grid md:grid-cols-2 gap-8 md:gap-10 items-center">
            <div className="reveal prose-max">
              <h2 className="font-display text-3xl sm:text-4xl">Ready to Enroll?</h2>
              <p className="text-white/90 mt-2 text-sm sm:text-base">Start your application or contact our admissions office for guidance.</p>
            </div>
            <div className="reveal delay-1 flex flex-col sm:flex-row gap-3 sm:justify-end">
              <Link to="/admissions/info" className="btn btn-accent">Start Application</Link>
              <a href="mailto:info@emmanuelfoundation.edu.ng" className="btn btn-ghost">Email Admissions</a>
            </div>
          </div>
        </div>
      </section>

      {/* Floating Apply (mobile) */}
      <a
        href="/admissions/info"
        className="fixed bottom-5 right-5 md:hidden btn btn-accent shadow-lg safe-bottom"
        aria-label="Apply now"
      >
        Apply
      </a>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\results\Results.jsx ====
import React from "react";
import { useAuth } from "../../app/auth";

const sessions = ["2024/2025", "2023/2024", "2022/2023"];
const terms = ["First", "Second", "Third"];

function computeGPA(rows) {
  if (!rows?.length) return { totalUnits: 0, totalPoints: 0, gpa: 0 };
  const gp = (g) => ({ A: 5, B: 4, C: 3, D: 2, E: 1, F: 0 }[g] ?? 0);
  let totalUnits = 0,
    totalPoints = 0;
  for (const r of rows) {
    totalUnits += r.unit;
    totalPoints += r.unit * gp(r.grade);
  }
  return {
    totalUnits,
    totalPoints,
    gpa: totalUnits ? (totalPoints / totalUnits).toFixed(2) : 0,
  };
}

export default function Results() {
  const { user, BRANCHES } = useAuth();
  const [form, setForm] = React.useState({ session: sessions[0], term: terms[0] });
  const [data, setData] = React.useState(null);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState("");

  React.useEffect(() => {
    setData(null);
    setError("");
  }, [form.session, form.term]);

  function onChange(e) {
    setForm((f) => ({ ...f, [e.target.name]: e.target.value }));
  }

  async function fetchResults() {
    setError("");
    setLoading(true);
    setData(null);

    try {
      // TODO: Replace with real API call:
      // GET /api/results?admissionNo=&dob=&branch=&session=&term=
      // Use user.admissionNo, user.dob, user.branch
      await new Promise((r) => setTimeout(r, 500)); // simulate network

      // Mock data (remove when backend is wired)
      const mock = {
        student: {
          name: user.name,
          admissionNo: user.admissionNo,
          class: form.session.startsWith("2024") ? "SS1 Science" : "JSS3",
          dob: user.dob,
          branch: user.branch,
        },
        session: form.session,
        term: form.term,
        courses: [
          { code: "ENG201", title: "English Language", grade: "A", unit: 3 },
          { code: "MAT201", title: "Mathematics", grade: "B", unit: 3 },
          { code: "BIO201", title: "Biology", grade: "A", unit: 2 },
          { code: "CHM201", title: "Chemistry", grade: "B", unit: 2 },
          { code: "PHY201", title: "Physics", grade: "A", unit: 2 },
        ],
      };

      // Example "not found" behavior:
      if (user.admissionNo.length < 5) {
        setError("No results found for the selected session/term.");
      } else {
        setData(mock);
      }
    } catch (err) {
      setError("Unable to fetch results. Please try again.");
    } finally {
      setLoading(false);
    }
  }

  const summary = data?.courses
    ? computeGPA(data.courses)
    : { totalUnits: 0, totalPoints: 0, gpa: 0 };

  const branchLabel =
    BRANCHES.find((b) => b.id === user?.branch)?.label || "â€”";

  return (
    <div className="container-wide py-10">
      <div className="flex flex-wrap items-center justify-between gap-4">
        <h2 className="font-display text-3xl">Results</h2>
        <div className="text-sm text-gray-600">
          {user?.name} â€” {user?.admissionNo} â€¢ <b>{branchLabel}</b>
        </div>
      </div>

      <div className="card p-6 mt-6">
        <div className="grid md:grid-cols-3 gap-4">
          <label className="grid gap-1">
            <span className="text-sm font-semibold">Session</span>
            <select
              name="session"
              value={form.session}
              onChange={onChange}
              className="border rounded-lg px-3 py-2 outline-none focus:ring-2 focus:ring-[hsl(var(--brand))]"
            >
              {sessions.map((s) => (
                <option key={s}>{s}</option>
              ))}
            </select>
          </label>

          <label className="grid gap-1">
            <span className="text-sm font-semibold">Term</span>
            <select
              name="term"
              value={form.term}
              onChange={onChange}
              className="border rounded-lg px-3 py-2 outline-none focus:ring-2 focus:ring-[hsl(var(--brand))]"
            >
              {terms.map((t) => (
                <option key={t}>{t}</option>
              ))}
            </select>
          </label>

          <div className="flex items-end">
            <button
              onClick={fetchResults}
              className="btn btn-primary w-full"
              disabled={loading}
            >
              {loading ? "Fetching..." : "Fetch Results"}
            </button>
          </div>
        </div>

        {error && (
          <div className="mt-4 px-3 py-2 rounded-lg bg-red-50 border border-red-200 text-red-700 text-sm">
            {error}
          </div>
        )}
      </div>

      {data && (
        <div className="mt-6 card p-6 overflow-x-auto">
          <div className="flex flex-wrap items-center justify-between gap-2">
            <div>
              <h3 className="text-xl font-semibold">{data.student.name}</h3>
              <p className="text-sm text-gray-600">
                {data.student.class} â€¢ {data.session} â€¢ {data.term} Term
              </p>
              <p className="text-sm text-gray-600">
                Admission No: <b>{data.student.admissionNo}</b> â€¢ DOB:{" "}
                {data.student.dob} â€¢ Campus:{" "}
                {BRANCHES.find((b) => b.id === data.student.branch)?.label ||
                  "â€”"}
              </p>
            </div>
            <button onClick={() => window.print()} className="btn btn-accent">
              Print
            </button>
          </div>

          <table className="w-full text-left mt-4">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-2">Course Code</th>
                <th className="px-4 py-2">Title</th>
                <th className="px-4 py-2">Unit</th>
                <th className="px-4 py-2">Grade</th>
              </tr>
            </thead>
            <tbody>
              {data.courses.map((c) => (
                <tr key={c.code} className="border-t">
                  <td className="px-4 py-2">{c.code}</td>
                  <td className="px-4 py-2">{c.title}</td>
                  <td className="px-4 py-2">{c.unit}</td>
                  <td className="px-4 py-2">{c.grade}</td>
                </tr>
              ))}
            </tbody>
          </table>

          <div className="mt-4 grid md:grid-cols-3 gap-3 text-sm">
            <div className="bg-gray-50 rounded-lg p-3">
              <b>Total Units:</b> {summary.totalUnits}
            </div>
            <div className="bg-gray-50 rounded-lg p-3">
              <b>Total Points:</b> {summary.totalPoints}
            </div>
            <div className="bg-gray-50 rounded-lg p-3">
              <b>GPA (5-pt):</b> {summary.gpa}
            </div>
          </div>

          <div className="mt-6 text-xs text-gray-500">
            * Display GPA uses a 5-point scale (A=5, B=4, C=3, D=2, E=1, F=0). Adjust to your policy if different.
          </div>
        </div>
      )}
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\student\Profile.jsx ====
import React from "react";
import { Link } from "react-router-dom";
import { useAuth } from "../../app/auth";
// If you already use lucide-react icons elsewhere you can uncomment these:
// import { LogOut, GraduationCap, Mail, Phone, MapPin, Calendar } from "lucide-react";

export default function Profile() {
  const { user, logout, updateBranch, BRANCHES } = useAuth();
  if (!user) return null;

  // Helpers
  const campusLabel =
    BRANCHES.find((b) => b.id === user.branch)?.label || "â€”";
  const initials = getInitials(user?.name || user?.admissionNo);
  const rows = [
    { k: "Full Name", v: user.name },
    { k: "Admission No.", v: user.admissionNo },
    { k: "Campus", v: campusLabel },
    { k: "Date of Birth", v: user.dob /*, icon: <Calendar size={14}/>*/ },
    { k: "Gender", v: user.gender },
    { k: "Class", v: user.class },
    { k: "Phone", v: user.phone /*, icon: <Phone size={14}/>*/ },
    { k: "Email", v: user.email /*, icon: <Mail size={14}/>*/ },
    { k: "State", v: user.state /*, icon: <MapPin size={14}/>*/ },
    { k: "LGA", v: user.lga },
    { k: "Address", v: user.address },
  ];

  return (
    <div className="container-wide py-6 md:py-10">
      {/* Header / Hero */}
      <div className="relative overflow-hidden rounded-2xl border bg-gradient-to-br from-emerald-50 via-white to-emerald-50">
        <div className="absolute inset-0 pointer-events-none [mask-image:radial-gradient(300px_200px_at_10%_0%,#000,transparent)]" />
        <div className="grid gap-5 p-5 md:p-8 lg:grid-cols-[auto_1fr_auto] lg:items-center">
          {/* Avatar */}
          <div className="flex items-center gap-4">
            <div className="h-16 w-16 md:h-20 md:w-20 rounded-full bg-emerald-600 text-white grid place-items-center text-xl md:text-2xl font-semibold shadow-sm ring-4 ring-white/70">
              {initials}
            </div>
            <div>
              <h1 className="font-display text-2xl md:text-3xl leading-tight">
                Student Profile
              </h1>
              <p className="text-sm text-gray-600">
                Welcome back{user?.name ? `, ${safe(user.name)}` : ""}.
              </p>
            </div>
          </div>

          {/* Campus switcher */}
          <div className="lg:justify-self-center">
            <label className="block text-xs font-semibold text-gray-600 mb-1">
              Campus
            </label>
            <div className="flex items-center gap-2">
              {/* <GraduationCap size={16} className="text-emerald-700" /> */}
              <select
                value={user.branch}
                onChange={(e) => updateBranch(e.target.value)}
                className="border rounded-lg px-3 py-2 text-sm bg-white focus:outline-none focus:ring-2 focus:ring-emerald-500"
                aria-label="Switch campus"
                title="Switch campus"
              >
                {BRANCHES.map((b) => (
                  <option key={b.id} value={b.id}>
                    {b.label}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Actions (top-right on desktop, flows below on mobile) */}
          <div className="flex items-center gap-2 justify-end">
            <Link
              to="/results"
              className="btn btn-primary whitespace-nowrap"
            >
              Check Results
            </Link>
            <button
              onClick={logout}
              className="inline-flex items-center gap-2 text-sm text-red-600 hover:text-red-700 hover:underline"
            >
              {/* <LogOut size={16}/> */}
              Logout
            </button>
          </div>
        </div>
      </div>

      {/* Main content grid */}
      <div className="mt-6 grid gap-6 lg:grid-cols-3">
        {/* Bio card */}
        <section className="card p-6 lg:col-span-2">
          <h3 className="font-semibold text-base md:text-lg mb-4">
            Bio Information
          </h3>

          {/* Compact summary row for small screens */}
          <div className="md:hidden mb-4 grid gap-1 text-sm">
            <p className="font-medium">{safe(user.name) || "â€”"}</p>
            <p className="text-gray-600">
              {safe(user.admissionNo) || "â€”"} â€¢ {campusLabel}
            </p>
          </div>

          {/* Definition grid */}
          <dl className="grid sm:grid-cols-2 gap-x-8 gap-y-3 text-sm">
            {rows.map(({ k, v /*, icon*/ }) => (
              <div key={k} className="flex">
                <dt className="w-36 shrink-0 text-gray-500">{k}</dt>
                <dd className="font-medium break-words">
                  {/* {icon && <span className="inline-flex -mt-0.5 mr-1 align-middle">{icon}</span>} */}
                  {safe(v) || <span className="text-gray-400">â€”</span>}
                </dd>
              </div>
            ))}
          </dl>
        </section>

        {/* Quick Actions (sticky on desktop) */}
        <aside className="card p-6 lg:sticky lg:top-6 h-max">
          <h3 className="font-semibold text-base md:text-lg">Quick Actions</h3>
          <p className="text-sm text-gray-600 mt-1">
            Jump right to common tasks.
          </p>
          <div className="mt-4 grid gap-2">
            <Link to="/results" className="btn btn-primary w-full">
              View Results
            </Link>
            <Link to="/apply/program" className="btn btn-accent w-full">
              Start New Application
            </Link>
          </div>

          {/* Small helpful card */}
          <div className="mt-5 rounded-xl border bg-emerald-50 p-4 text-xs text-emerald-900">
            <p className="font-semibold mb-1">Tip</p>
            <p>
              Make sure your profile details are correct. If anything looks
              wrong, contact the school admin office to update your records.
            </p>
          </div>
        </aside>
      </div>
    </div>
  );
}

/* ---------- helpers ---------- */

function getInitials(name = "") {
  const parts = name
    .replace(/\s+/g, " ")
    .trim()
    .split(" ")
    .filter(Boolean);
  if (!parts.length) return "ST";
  const first = parts[0]?.[0] || "";
  const last = parts[parts.length - 1]?.[0] || "";
  return (first + last).toUpperCase();
}

function safe(v) {
  if (v === null || v === undefined) return "";
  return String(v);
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\pages\student\StudentLogin.jsx ====
import React from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../app/auth"; //

const CAMPUSES = [
  { id: "makurdi", label: "Makurdi" },
  { id: "gboko", label: "Gboko" },
];

export default function StudentLogin() {
  const nav = useNavigate();
  const { login } = useAuth();
  const [schoolNo, setSchoolNo] = React.useState("");
  const [dob, setDob] = React.useState("");
  const [campus, setCampus] = React.useState("");
  const [err, setErr] = React.useState("");
  const [loading, setLoading] = React.useState(false);

  function validate() {
    if (!campus) return "Please choose your campus.";
    if (!schoolNo.trim()) return "Enter your School Number.";
    if (!dob) return "Select your Date of Birth.";
    return "";
  }

  function onSubmit(e) {
    e.preventDefault();
    const eMsg = validate();
    if (eMsg) { setErr(eMsg); return; }
    setErr("");
    setLoading(true);

    // Fake auth for now; replace with backend request later
    setTimeout(() => {
      localStorage.setItem("student.auth", JSON.stringify({
        schoolNo: schoolNo.trim(),
        dob,
        campus,
        name: "Student Name", // replace with real name from backend later
      }));
      setLoading(false);
      nav("/profile"); // go straight to profile
    }, 500);
  }

  return (
    <div className="min-h-[80vh] grid lg:grid-cols-2">
      {/* Left brand panel (desktop only) */}
      <aside className="hidden lg:block relative overflow-hidden">
        <div className="absolute inset-0 bg-[hsl(var(--brand))]" />
        <div className="absolute inset-0 opacity-20" style={{backgroundImage:
          "radial-gradient(600px 300px at 20% 30%, #fff, transparent 60%), radial-gradient(500px 260px at 80% 50%, #fff, transparent 60%)"}} />
        <div className="relative h-full flex items-center justify-center p-10 text-white">
          <div className="max-w-md">
            <div className="size-12 rounded-full bg-white/15 grid place-items-center text-2xl font-extrabold">E</div>
            <h2 className="font-display text-4xl mt-4 leading-tight">Emmanuel Foundation</h2>
            <p className="text-white/90 mt-2">Secure student access to profile and results.</p>
          </div>
        </div>
      </aside>

      {/* Right form */}
      <main className="flex items-center">
        <div className="container-wide w-full py-10">
          <div className="mx-auto max-w-md">
            <div className="mb-6">
              <p className="kicker">Student Portal</p>
              <h1 className="font-display text-3xl mt-1">Login</h1>
              <p className="text-gray-600 text-sm mt-2">Enter your details to continue.</p>
            </div>

            <form onSubmit={onSubmit} className="card p-6 grid gap-4">
              {err && (
                <div className="rounded-lg bg-red-50 border border-red-200 text-red-700 px-3 py-2 text-sm">
                  {err}
                </div>
              )}

              <label className="grid gap-1">
                <span className="text-sm font-semibold">Campus</span>
                <select
                  value={campus}
                  onChange={(e) => setCampus(e.target.value)}
                  className="border rounded-lg px-3 py-2 outline-none focus:ring-2 focus:ring-[hsl(var(--brand))]"
                  required
                >
                  <option value="">Select campus</option>
                  {CAMPUSES.map((c) => (
                    <option key={c.id} value={c.id}>{c.label}</option>
                  ))}
                </select>
              </label>

              <label className="grid gap-1">
                <span className="text-sm font-semibold">School Number</span>
                <input
                  value={schoolNo}
                  onChange={(e) => setSchoolNo(e.target.value)}
                  placeholder="e.g. EF/MKD/2025/00123"
                  className="border rounded-lg px-3 py-2 outline-none focus:ring-2 focus:ring-[hsl(var(--brand))]"
                  required
                />
              </label>

              <label className="grid gap-1">
                <span className="text-sm font-semibold">Date of Birth</span>
                <input
                  type="date"
                  value={dob}
                  onChange={(e) => setDob(e.target.value)}
                  className="border rounded-lg px-3 py-2 outline-none focus:ring-2 focus:ring-[hsl(var(--brand))]"
                  required
                />
                <span className="text-xs text-gray-500">Format: YYYY-MM-DD</span>
              </label>

              <button type="submit" className="btn btn-primary w-full" disabled={loading}>
                {loading ? "Logging inâ€¦" : "Login"}
              </button>

              <p className="text-xs text-gray-500 mt-1">
                By continuing you agree to our NDPR-compliant privacy policy.
              </p>
            </form>

            <div className="mt-6 text-xs text-gray-600">
              Trouble signing in? Email <a className="text-[hsl(var(--brand))] font-semibold" href="mailto:info@emmanuelfoundation.edu.ng">info@emmanuelfoundation.edu.ng</a> or call +234 800 000 0000.
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\services\admissions.js ====
import { apiGet, apiPost } from "@/lib/api";

export const AdmissionsService = {
  apply: (payload) => apiPost("/admissions/apply", payload),
  status: (email) => apiGet(`/admissions/status?email=${encodeURIComponent(email)}`),
};



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\services\results.js ====
import { apiGet } from "@/lib/api";

export const ResultsService = {
  getByMatricAndSession: (matricNo, session) =>
    apiGet(`/results?matricNo=${encodeURIComponent(matricNo)}&session=${encodeURIComponent(session)}`),
};



==== FILE: C:\Users\KING\Desktop\school-management-frontend\src\types\index.d.ts ====


